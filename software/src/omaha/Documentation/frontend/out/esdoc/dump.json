[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/account-creation-form.html.js",
    "memberof": null,
    "longname": "rawjs/account-creation-form.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    Polymer({\n      is: 'account-creation-form',\n\n      /**\n       * Submit is an on-click that is fired when the user clicks the submit button. The submit function takes care of collecting the data from the form,\n       * packaging it up, and then sending it off. It also does some validation and fills in some dots, such as the level; this variable is inferred to be the [level of user making the account] - 1. \n       */\n      _submit: function() {\n        if(!this.$.form.validate())\n            return;\n        var password = this.$.password.value;\n        var confirm = this.$.confirm.value\n        this.err = \"\";\n        this.successMsg = \"\";\n        this.$.progress.customStyle['--paper-progress-active-color'] = \"#4285f4\";\n        this.$.progress.updateStyles();\n        this.$.progress.indeterminate = true;\n        if(password != confirm) {\n          this.async(function() {\n            this.$.progress.customStyle['--paper-progress-active-color'] = \"#F44336\";\n            this.$.progress.updateStyles();\n            this.$.progress.value = 100;\n            this.$.progress.indeterminate = false;\n            this.err = \"Passwords do not match\";\n            this.$.password.value = \"\";\n            this.$.confirm.value = \"\";\n            return;\n          }, 1000);\n        } else {\n          hash = document.cookie.split('; ');\n\n          this.$.loginAjax.body = {\n            level:      parseInt(localStorage.getItem(\"level\")) - 1,\n            username:   this.$.username.value,\n            password:   this.$.password.value,\n            name:       this.$.name.value,\n            email:      this.$.email.value,\n            phone:      this.$.phone.value,\n            speakerid:  parseInt(this.$.speakerid.value), \n            zoneid:     parseInt(this.$.zoneid.value)\n          }\n          this.$.loginAjax.generateRequest();\n        }\n      },\n\n      /**\n       * This is the logResponse for the submit funtion, this changes some styles to reflect that an account was created.\n       */\n      _logResponse: function(event, data) {\n        if(!data.response.success) {\n          this.$.progress.customStyle['--paper-progress-active-color'] = \"#F44336\";\n          this.$.progress.updateStyles();\n          this.$.progress.indeterminate = false;\n          this.$.progress.value = 100;\n          this.err = data.response.err\n        } else {\n          this.$.progress.value = 0;\n          this.$.progress.indeterminate = false;\n          this.successMsg = \"Account created\";\n          this.$.username.value = \"\";\n          this.$.password.value = \"\";\n          this.$.confirm.value = \"\";\n        }\n    }\n    });\n"
  },
  {
    "__docId__": 1,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/averaging-controller.html.js",
    "memberof": null,
    "longname": "rawjs/averaging-controller.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    Polymer({\n      is: 'averaging-controller',\n\n      properties: {\n        averaging: Number,\n\n        speakerId: {\n            type: Number,\n          },\n\n        speaker: {\n          type: Object\n        }\n      },\n      \n      /**\n       * This function is fired when the 'set ratio' button is clicked by the user to set the effectiveness and pleasantness. \n       */\n      _selectionChanged: function(event) {\n        //console.log(this.speakerId);\n\n        var menu = document.getElementById('menu');\n\n        var attributeValues;\n\n        var updatedAttributes = [\"averaging\"];\n\n        attributeValues = {\n          effectiveness: this.$.effectiveness.value,\n          pleasantness: this.$.pleasantness.value\n        };\n        if(zoneFlag == 0) {\n          this.$.selectModeAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,                        \n            \"speaker\": speaker.id\n          };\n\n          //console.log(this.$.selectModeAjax.body);\n          this.$.selectModeAjax.generateRequest();\n        } else {\n          this.$.selectModeAjaxZone.body = {                      \n            \"zone\": speaker.zone.zoneID,\n            \"effectiveness\": this.$.effectiveness.value,\n            \"pleasantness\": this.$.pleasantness.value\n          };\n\n          //console.log(this.$.selectModeAjaxZone.body);\n          this.$.selectModeAjaxZone.generateRequest();\n          //console.log(zones);\n        }\n        //console.log(\"this is the speaker\", speaker);\n        var selectModeAjax = document.getElementById(\"selectModeAjax\");\n        //console.log(selectModeAjax);\n        this.$.toast.text = \"Effectiveness set to \" + this.$.effectiveness.value + \". Pleasantness set to \" + this.$.pleasantness.value + \".\"; \n        this.$.toast.show();\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(data.response);\n      },\n\n      /**\n       * This function is used to decrement the effectiveness.\n       */\n      decrementEffectiveness: function() {\n        this.$.effectiveness.decrement();\n        this.$.effectiveness._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      /**\n       * This function is used to increment the effectiveness.\n       */\n      incrementEffectiveness: function() {\n        this.$.effectiveness.increment();\n        this.$.effectiveness._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n\n      /**\n       * This function is used to decrement the pleasantness.\n       */\n      decrementPleasantnesss: function() {\n        this.$.pleasantness.decrement();\n        this.$.pleasantness._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n\n      /**\n       * This function is used to increment the pleasantness.\n       */\n      incrementPleasantnesss: function() {\n        this.$.pleasantness.increment();\n        this.$.pleasantness._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n\n      /**\n       * Resetting the knob resets the knob to remove the pin that is hoisted up when the knob is moved.\n       */\n      resetKnob: function(elem) {\n        elem.prevTimeout = 0;\n        elem.$.effectiveness._resetKnob();\n        elem.$.pleasantness._resetKnob();\n      },\n      \n    });\n"
  },
  {
    "__docId__": 2,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/equalizer-controller-zone.html.js",
    "memberof": null,
    "longname": "rawjs/equalizer-controller-zone.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n  var slidersZone;\n  var handlesZone;\n  var backgroundZone;\n\n  var equalizerToastZone = 0;\n  var equalizerModeZone;\n  var typeFoundZone = 0;\n\n\n  function getValuesZone() {\n    switch (equalizerModeZone.selected) {\n      case \"masking\": \n        typeFoundZone = 0;\n        //console.log(equalizerModeZone.selected);\n        break;\n      case \"music\":\n        typeFoundZone = 1;\n        //console.log(equalizerModeZone.selected);\n        break;\n      case \"paging\":\n        typeFoundZone = 2;\n        //console.log(equalizerModeZone.selected);\n        break;\n\n      default:\n        //console.log(\"something is messed up with the equalizerModeZone = this.$.equalizerSelectorZone.selected;\");\n      }\n\n      return typeFoundZone;\n  }\n\n\n  $(document).ready(function() {\n    //console.log(\"equalizer zoneFlag\", zoneFlag);\n    slidersZone = document.getElementsByClassName(\"ui-slider-range ui-widget-header ui-corner-all ui-slider-range-min\");\n    handlesZone = document.getElementsByClassName(\"ui-slider-handle ui-state-default ui-corner-all\");\n    backgroundZone = document.getElementsByClassName(\"custom_slider_zone style-scope equalizer-controller-zone ui-slider ui-slider-vertical ui-widget ui-widget-content ui-corner-all\");\n    //console.log(slidersZone, \"\\n\", handlesZone, \"\\n\", background);\n  });\n  \n  var lastSelectedZone = 0;\n  var isThereAnErrorZone = false;\n\n  var lastEQModeZone = \"masking\";\n  var iirConstantsZone = [];\n\n  for(loopVar = 0; loopVar < 63; loopVar++) {\n    iirConstantsZone[loopVar] = 0;\n  }\n  //console.log(iirConstantsZone);\n\n  function showEqualizerSwitchDialogZone(mode) {\n    //console.log(mode);\n    switch(mode) {\n      case \"masking\": {\n        document.getElementById(\"eqmodeZone\").innerHTML = \"You are switching the speaker to masking mode<br>In this mode, the speaker will produce equalized white noise and unequalized music.\";\n        break;\n      }\n      case \"music\": {\n        document.getElementById(\"eqmodeZone\").innerHTML = \"You are switching the speaker to music mode<br>In this mode the speaker will produce equalized music only.\";\n        break;\n      }\n      case \"paging\": {\n        document.getElementById(\"eqmodeZone\").innerHTML = \"You are switching the speaker to paging mode;<br>Something needs to go here, ask Matt\"\n        break;\n      }\n    }\n    document.querySelector(\"#switchingEQModeDialogZone\").toggle(); \n    //console.log(\"i got here zone\");\n  }\n\n  function modeChangedZone(mode) {\n\n    switch(mode) {\n      case \"masking\":\n        musicMenuZone.style.visibility = \"hidden\";\n        equalizerMenuZone.style.visibility = \"visible\";\n        pagingMenuZone.style.visibility = \"hidden\";\n        showEqualizerSwitchDialogZone(\"masking\");\n        break;\n\n      case \"music\":\n        equalizerMenuZone.style.visibility = \"hidden\";\n        musicMenuZone.style.visibility = \"visible\";\n        pagingMenuZone.style.visibility = \"hidden\";\n        showEqualizerSwitchDialogZone(\"music\");\n        break;\n      \n      case \"paging\":\n        musicMenuZone.style.visibility = \"hidden\";\n        equalizerMenuZone.style.visibility = \"hidden\";\n        pagingMenuZone.style.visibility = \"visible\";\n        showEqualizerSwitchDialogZone(\"paging\");\n        break;\n\n      default: \n        //console.log(\"SOMETHING WAS WRONG WITH WHAT WAS PASSED TO modeChangedZone()\");\n    }\n  }\n\n\n    Polymer({\n      is: 'equalizer-controller-zone',\n      \n      properties: {\n        internalEqualizer: String,\n\n        mode: {\n        type:  String,\n        value: \"masking\"\n        },\n\n        speakerId: {\n          type: Number\n        },\n\n        speaker: {\n          type: Object\n        },\n\n        equalizer: {\n          type: String,\n          notify: true,\n          observer: '_setInternalEqualizerZone'\n        }\n      },\n\n\n      _setInternalEqualizerZone: function(iirConstantsStringZone) {\n        this.internalEqualizer = iirConstantsStringZone;\n        //console.log(\"_setInternalEqualizerZone \" + iirConstantsStringZone);\n      },\n      \n      _setEqualizerClickedZone: function() {\n\n        //console.log(\"equalizer clicked zoneFlag\", zoneFlag);\n\n        var checkIntZone = 0;\n        var checkBandsZone = [];\n        var equalizerTextZone = \"Invalid input at \";\n\n        $(document.getElementsByClassName(\"levelZone\")).each(function(i) {\n          typeof this.value;\n          if(isNaN(this.value) || this.value == \"\" || this.value < -40 || this.value > 10) {\n            //console.log(this.name);\n            checkIntZone++;\n            checkBandsZone.push(this.name);\n          }\n        });\n\n        if(checkIntZone > 0) {\n          if(checkBandsZone.length == 1) {\n            equalizerTextZone += checkBandsZone[0] + \"Hz\";\n          } else {\n            for (var i = 0; i < checkBandsZone.length - 1; i++) {\n              equalizerTextZone += checkBandsZone[i] + \"Hz, \"\n            }\n            equalizerTextZone += \"and \" + checkBandsZone[checkBandsZone.length - 1] + \"Hz\";\n          }\n          this.$.equalizerToastZone.duration = 2000 + (500 * checkBandsZone.length);\n          this.$.equalizerToastZone.text = equalizerTextZone;\n          this.$.equalizerToastZone.show();\n        } else {\n          //console.log(this.equalizer);\n          this.iirConstantsStringZone = iirConstantsZone.slice(0 + (21 * typeFoundZone), 21 + (21 * typeFoundZone)).join(\", \");\n\n\n          this.$.equalizerToastZone.text = \"Equalizer set to \" + this.iirConstantsStringZone;\n          this.$.equalizerToastZone.show();\n          //console.log(\"_setEqualizerClickedZone\"); \n          //console.log(this.iirConstantsStringZone);\n          \n          // make this zone wide\n          for (var i = 0; i < speaker.CurrentPreset.length; i++) { \n            //speaker.CurrentPreset[i] = iirConstantsZone[i];\n          }\n\n          //console.log(iirConstantsZone.slice(0 + (21 * typeFoundZone), 21 + (21 * typeFoundZone)).length);\n\n          this.$.updateEqualizerZone.body = {\n            \"zone\": speaker.zone.zoneID,\n            \"constants\": iirConstantsZone.slice(0 + (21 * typeFoundZone), 21 + (21 * typeFoundZone)).join(\" \"),\n            \"mode\": getValuesZone()\n          };\n          this.$.updateEqualizerZone.generateRequest();\n        }\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(\"shuddup\");\n        //console.log(event, data);\n      },\n\n      _acceptPressedZone: function(event) {\n        var name = this.$.popupInputZone.value.valueOf().replace(\"\\n\", \"\").replace(\"\\t\", \"\");\n        var ifvar = 0;\n        if(speaker.zone.PresetNames.length > 0) {\n          for(var i = 0; i < speaker.zone.PresetNames.length; i++) {\n            if(name.toLowerCase() == speaker.zone.PresetNames[i].valueOf().toLowerCase()) {\n              //console.log(\"same name dude\");\n              ifvar++;    // make more checks dummy\n            }\n          }\n        }\n\n        if(ifvar > 0) {\n          //console.log(\"we are in here right now\");\n          this.err = \"Invalid name: Name already taken\";\n          this.$.toastyZone.text = this.err;\n          this.$.toastyZone.show();\n        } else {\n          this.$.addPresetAjaxZone.body = {\n            \"zone\": speaker.zone.zoneID,\n            \"name\": name,\n            \"type\": getValuesZone(),\n            \"constants\": iirConstantsZone.slice(0 + (21 * typeFoundZone), 21 + (21 * typeFoundZone)).join(\" \"),\n          };\n\n          //console.log(iirConstantsZone.join(\" \"));\n\n          //console.log(\"addPresetAjaxZone:\", addPresetAjaxZone.body);\n          this.$.addPresetAjaxZone.generateRequest();\n\n          this.$.dialogZone.toggle();\n\n          this.$.toastyZone.text = \"Added preset: \" + name + \" \" + iirConstantsZone.slice(0 + (21 * typeFoundZone), 21 + (21 * typeFoundZone)).join(\" \");\n          //console.log(this.$.toastyZone.text);\n\n          this.$.toastyZone.show();\n\n          temp = document.createElement(\"paper-item\");\n          temp.setAttribute(\"value\", name);\n          temp.setAttribute(\"id\", name);\n          temp.innerHTML = name;\n          Polymer.dom(this.$.equalizerListboxZone).appendChild(temp);\n\n          var length = speaker.zone.Equalizer.length;\n          //console.log(length);\n\n          //console.log(iirConstantsZone);\n\n          var iirConstantsCopy = iirConstantsZone.slice();\n\n          //console.log(\"iirConstantsCopy: \", iirConstantsCopy);\n          speaker.zone.Equalizer.push(iirConstantsZone.slice(0 + (21 * typeFoundZone), 21 + (21 * typeFoundZone)));\n          //}\n\n          speaker.zone.PresetNames[speaker.zone.PresetNames.length] = name;\n\n          //console.log(speaker.zone.Equalizer);\n\n          this.$.equalizerListboxZone.selected = name;\n          this.$.popupInputZone.value = \"\";\n        }\n      },\n\n      _cancelPressedZone: function(event) {\n        this.$.equalizerListboxZone.selected = -1;\n        //console.log(lastSelectedZone);\n      },\n\n      _switchPressedZone: function(event) {\n        this.$.changeEQModeAjaxZone.body = {\n          \"zone\":  speaker.zone.zoneID,\n          \"mode\":  getValuesZone()\n        };\n\n        this.$.changeEQModeAjaxZone.generateRequest();\n\n        this.$.switchingEQModeDialogZone.toggle();\n        lastEQModeZone = this.$.equalizerSelectorZone.selected;\n        //console.log(lastEQModeZone);\n      },\n\n      _cancelSwitchPressedZone: function(event) {\n        switch(lastEQModeZone) {\n          case \"masking\":\n            musicMenuZone.style.visibility = \"hidden\";\n            pagingMenuZone.style.visibility = \"hidden\";\n            equalizerMenuZone.style.visibility = \"visible\";\n            break;\n\n          case \"music\":\n            musicMenuZone.style.visibility = \"visible\";\n            equalizerMenuZone.style.visibility = \"hidden\";\n            pagingMenuZone.style.visibility = \"hidden\";\n            break;\n\n          case \"paging\":\n            pagingMenuZone.style.visibility = \"visible\";\n            equalizerMenuZone.style.visibility = \"hidden\";\n            musicMenuZone.style.visibility = \"hidden\";\n\n\n          default:\n        }\n        this.$.equalizerSelectorZone.selected = lastEQModeZone;\n      },\n\n      listeners: {\n        'equalizerListboxZone.iron-select': '_presetSelectionChangedZone'\n      },\n      \n      _presetSelectionChangedZone: function(event) {\n        //console.log(this.speakerId);\n        //console.log(this.speaker);\n\n        var selected = this.$.equalizerListboxZone.selected.valueOf().toLowerCase().replace(\"\\n\", \"\");\n\n        if(selected == \"currently applied\") {\n          this.$.toastyZone.text = \"Currently applied constants loaded! \" + iirConstantsZone.join(\", \");\n          this.$.toastyZone.show();\n\n          lastSelectedZone = this.$.equalizerListboxZone.selected;\n\n          for (var i = 0; i < speaker.zone.currentPreset.length; i++) { \n            slidersZone[i].style.height = (speaker.zone.currentPreset[i] + 40) * 2 + \"%\";\n            //console.log(this);\n            handlesZone[i].style.bottom = (speaker.zone.currentPreset[i] + 40) * 2 + \"%\";\n            $(\"#text\" + (parseInt(i) + 1)).val(speaker.zone.currentPreset[i]);\n            iirConstantsZone[i] = speaker.zone.currentPreset[i];       \n          }\n        } else if(selected == \"add new preset\") {\n            var addPresetAjaxZone = document.getElementById(\"addPresetAjaxZone\");\n            //console.log(addPresetAjaxZone);\n            this.$.dialogZone.toggle();\n        } else if(speaker.zone.PresetNames.length > 0) {\n            lastSelectedZone = this.$.equalizerListboxZone.selected;\n            var associationLink = -1;\n            for (k in speaker.zone.PresetNames) {\n              if(selected == speaker.zone.PresetNames[k].valueOf().toLowerCase()) {\n                this.$.toastyZone.text = this.$.equalizerListboxZone.selected + \" preset loaded! \" + iirConstantsZone.slice(0 + (21 * typeFoundZone), 21 + (21 * typeFoundZone)).join(\", \");\n                this.$.toastyZone.show();\n                //console.log(\"Zone \" + speaker.zone.zoneID + \" selected preset: \" + selected);\n                associationLink = k;\n                //console.log(\"associationLink\", associationLink);\n                break;\n              }\n            }\n            if(associationLink != -1) {\n              //console.log(speaker.zone.Equalizer.length);\n              for (var j = 0; j < speaker.zone.Equalizer[0].length; j++) {\n                slidersZone[j + 63].style.height = (speaker.zone.Equalizer[associationLink][j] + 40) * 2 + \"%\";\n                handlesZone[j + 63].style.bottom = (speaker.zone.Equalizer[associationLink][j] + 40) * 2 + \"%\";\n                $(\"#text\" + (parseInt(j) + 1)).val(speaker.zone.Equalizer[associationLink][j]);\n                iirConstantsZone[j] = speaker.zone.Equalizer[associationLink][j];\n              }\n            }\n          }\n      },\n      \n      resetKnob: function(elem) {\n        elem.prevTimeout = 0;\n        elem.$.volume2._resetKnob();\n      },\n\n      showToast: function() {\n        //console.log(\"gi\");\n      },\n\n      ready: function() {\n        //console.log(\"this.$\", this.$);\n        this.internalEqualizer = this.iirConstantsStringZone;\n        equalizerToastZone = this.$.equalizerToastZone;\n        equalizerModeZone = this.$.equalizerSelectorZone;\n      }\n    });\n\n    function showToast() {\n      //console.log(\"gi\");\n    }\n\n    function inputChangedZone() {\n        var error = false;\n      $(document.getElementsByClassName(\"levelZone\")).each(function(i) {\n        //console.log(this.value);\n        if(isNaN(this.value) || this.value == \"\" || this.value < -40 || this.value > 10) {\n          error = true;\n          slidersZone[i].style.background = \"#F33F31\";\n          handlesZone[i].style.background = \"#F33F31\";\n          backgroundZone[i].style.background = \"rgba(243, 63, 49, .2)\";\n          \n        } else {        \n          iirConstantsZone[i] = parseInt(this.value);\n          slidersZone[i].style.background = \"#3f51b5\";\n          handlesZone[i].style.background = \"#3f51b5\";\n          backgroundZone[i].style.background = \"rgba(63, 81, 181, .2)\";\n\n          slidersZone[i].style.height = (iirConstantsZone[i] + 40) * 2 + \"%\";\n          handlesZone[i].style.bottom = (iirConstantsZone[i] + 40) * 2 + \"%\";\n        }\n      });\n        //console.log(error);\n\n        if(error == false) {\n          isThereAnErrorZone = false;\n        } else {\n          isThereAnErrorZone = true;\n        }\n\n        //console.log(isThereAnErrorZone);\n    }\n\n  var MIN_WIDTH_SUPPORTED = 0;\n  var MIN_HEIGHT_SUPPORTED = 0;\n\n  if($(window).width() > MIN_WIDTH_SUPPORTED || $(window).height() > MIN_HEIGHT_SUPPORTED) {\n    $(function() {\n      $(\".custom_slider_zone\").each(function(i) {\n        j = i - 63;\n        //console.log(\"this is me, the eq: \", i);\n        var texts = $(\"#text\" + (i + 1) +\":nth-child(1)\");\n        $(this).slider({\n          orientation: \"vertical\",\n          range: \"min\",\n          step: .01,\n          min: -40,\n          max: 10,\n          value: 0,\n          slide: function( event, ui) {\n            isThereAnErrorZone = false;\n            slidersZone[i].style.background = \"#3f51b5\";\n            handlesZone[i].style.background = \"#3f51b5\";\n            //console.log(i);\n            //console.log(texts);\n            backgroundZone[i].style.background = \"rgba(63, 81, 181, .2)\";\n            $(texts[1]).val(ui.value);\n\n            iirConstantsZone[i] = ui.value;\n          }\n        });\n        $(texts[1]).val($(\".custom > .custom_slider_zone\").slider(\"value\"));\n        //console.log(texts);\n      });\n    });\n  } else {\n      //console.log(\"there is not enough space to display the equalizer\");    \n    }\n  $(window).resize(function() {\n    if($(window).width() < MIN_WIDTH_SUPPORTED || $(window).height() < MIN_HEIGHT_SUPPORTED) {\n      //console.log($(window).width());\n\n      //console.log(document.getElementById(\"eighty\").offsetWidth);\n    } else {\n      var custom_container = document.getElementById(\"custom_container\");\n    }\n  });\n\n"
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "equalizerToastZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~equalizerToastZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "typeFoundZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~typeFoundZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getValuesZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~getValuesZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lastSelectedZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~lastSelectedZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "isThereAnErrorZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~isThereAnErrorZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lastEQModeZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~lastEQModeZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "iirConstantsZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~iirConstantsZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showEqualizerSwitchDialogZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~showEqualizerSwitchDialogZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "mode",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "modeChangedZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~modeChangedZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "mode",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showToast",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~showToast",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "inputChangedZone",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~inputChangedZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MIN_WIDTH_SUPPORTED",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~MIN_WIDTH_SUPPORTED",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 405,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MIN_HEIGHT_SUPPORTED",
    "memberof": "rawjs/equalizer-controller-zone.html.js",
    "longname": "rawjs/equalizer-controller-zone.html.js~MIN_HEIGHT_SUPPORTED",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/equalizer-controller.html.js",
    "memberof": null,
    "longname": "rawjs/equalizer-controller.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n  var sliders;\n  var handles;\n  var background;\n\n  var equalizerToast = 0;\n  var equalizerMode;\n  var typeFound = 0;\n\n  /**\n   * GetValues is used to get the type of equalizer that is currently selected.\n   * @return {[integer]} [typeFound is the type of equalizer that was found in interger enumerated form]\n   */\n  function getValues() {\n    switch (equalizerMode.selected) {\n      case \"masking\": \n        typeFound = 0;\n        //console.log(equalizerMode.selected);\n        break;\n      case \"music\":\n        typeFound = 1;\n        //console.log(equalizerMode.selected);\n        break;\n      case \"paging\":\n        typeFound = 2;\n        //console.log(equalizerMode.selected);\n        break;\n\n      default:\n        //console.log(\"something is messed up with the equalizerMode = this.$.equalizerSelector.selected;\");\n      }\n\n      return typeFound;\n  }\n\n\n  $(document).ready(function() {\n    //console.log(\"equalizer zoneFlag\", zoneFlag);\n    sliders = document.getElementsByClassName(\"ui-slider-range ui-widget-header ui-corner-all ui-slider-range-min\");\n    handles = document.getElementsByClassName(\"ui-slider-handle ui-state-default ui-corner-all\");\n    background = document.getElementsByClassName(\"custom_slider style-scope equalizer-controller ui-slider ui-slider-vertical ui-widget ui-widget-content ui-corner-all\");\n\n    //console.log(sliders, \"\\n\", handles, \"\\n\", background);\n\n  });\n  \n  var lastSelected = 0;\n  var isThereAnError = false;\n\n\n\n  var lastEQMode = \"masking\";\n  var iirConstants = [];\n\n  for(loopVar = 0; loopVar < 63; loopVar++) {\n    iirConstants[loopVar] = 0;\n  }\n  //console.log(iirConstants);\n\n  /**\n   * This function is used to show the switching dialog that notifies the user of the implications of their changes when switching equalizers.\n   */\n  function showEqualizerSwitchDialog(mode) {\n    //console.log(mode);\n    switch(mode) {\n      case \"masking\": {\n        document.getElementById(\"eqmode\").innerHTML = \"You are switching the speaker to masking mode<br>In this mode, the speaker will produce equalized white noise and unequalized music.\";\n        break;\n      }\n      case \"music\": {\n        document.getElementById(\"eqmode\").innerHTML = \"You are switching the speaker to music mode<br>In this mode the speaker will produce equalized music only.\";\n        break;\n      }\n      case \"paging\": {\n        document.getElementById(\"eqmode\").innerHTML = \"You are switching the speaker to paging mode;<br>Something needs to go here, ask Matt\"\n        break;\n      }\n    }\n    document.querySelector(\"#switchingEQModeDialog\").toggle();\n    //console.log(\"i got here\");\n  }\n\n  /**\n   * This function is used for changing the equalizer mode. It also takes care of some UI switching as well, such as hiding and showing the appropriate menus for the equalizers.\n   */\n  function modeChanged(mode) {\n\n    switch(mode) {\n      case \"masking\":\n        equalizerMenu.style.visibility = \"visible\";\n        musicMenu.style.visibility = \"hidden\";\n        pagingMenu.style.visibility = \"hidden\";\n        showEqualizerSwitchDialog(\"masking\");\n        break;\n\n      case \"music\":\n        equalizerMenu.style.visibility = \"hidden\";\n        musicMenu.style.visibility = \"visible\";\n        pagingMenu.style.visibility = \"hidden\";\n        showEqualizerSwitchDialog(\"music\");\n        break;\n      \n      case \"paging\":\n        equalizerMenu.style.visibility = \"hidden\";\n        musicMenu.style.visibility = \"hidden\";\n        pagingMenu.style.visibility = \"visible\";\n        showEqualizerSwitchDialog(\"paging\");\n        break;\n\n      default: \n        //console.log(\"SOMETHING WAS WRONG WITH WHAT WAS PASSED TO modeChanged()\");\n    }\n  }\n\n\n    Polymer({\n      is: 'equalizer-controller',\n      \n      properties: {\n        internalEqualizer: String,\n\n        mode: {\n        type:  String,\n        value: \"masking\"\n        },\n\n        speakerId: {\n          type: Number\n        },\n\n        speaker: {\n          type: Object\n        },\n\n        equalizer: {\n          type: String,\n          notify: true,\n          observer: '_setInternalEqualizer'\n        }\n      },\n\n      /**\n       * Setting the internal equalizer has internal effects so that the system can keep track of itself. It sets a variable that when set fires a function to update the server of its value.\n       */\n      _setInternalEqualizer: function(iirConstantsString) {\n        this.internalEqualizer = iirConstantsString;\n        //console.log(\"_setInternalEqualizer \" + iirConstantsString);\n      },\n      \n      /**\n       * This function sets the equalizer value and is the function that is fired when the user presses the 'set equalizer' button. This function validates the bands to make sure that correct values are being submitted.\n       */\n      _setEqualizerClicked: function() {\n\n        //console.log(\"equalizer clicked zoneFlag\", zoneFlag);\n\n        var checkInt = 0;\n        var checkBands = [];\n        var equalizerText = \"Invalid input at \";\n\n        $(document.getElementsByClassName(\"level\")).each(function(i) {\n          typeof this.value;\n          if(isNaN(this.value) || this.value == \"\" || this.value < -40 || this.value > 10) {\n            //console.log(this, this.name, this.value);\n            checkInt++;\n            checkBands.push(this.name);\n          }\n        });\n\n        if(checkInt > 0) {\n          if(checkBands.length == 1) {\n            equalizerText += checkBands[0] + \"Hz\";\n          } else {\n            for (var i = 0; i < checkBands.length - 1; i++) {\n              equalizerText += checkBands[i] + \"Hz, \"\n            }\n            equalizerText += \"and \" + checkBands[checkBands.length - 1] + \"Hz\";\n          }\n          this.$.equalizerToast.duration = 2000 + (500 * checkBands.length);\n          this.$.equalizerToast.text = equalizerText;\n          this.$.equalizerToast.show();\n        } else {\n\n\n          this.equalizer = iirConstants.slice(0 + (21 * typeFound), 21 + (21 * typeFound)).join(\" \");\n          //console.log(this.equalizer);\n          this.iirConstantsString = iirConstants.slice(0 + (21 * typeFound), 21 + (21 * typeFound)).join(\", \");\n\n\n          this.$.equalizerToast.text = \"Equalizer set to \" + this.iirConstantsString;\n          this.$.equalizerToast.show();\n          //console.log(\"_setEqualizerClicked\");\n          //console.log(iirConstants);\n          \n          for (var i = 0; i < this.speaker.CurrentPreset.length; i++) { \n            this.speaker.CurrentPreset[i] = iirConstants[i];\n          }\n        }\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(\"shuddup\");\n        //console.log(event, data);\n      },\n\n      /**\n       * This function is used when the the user adds a preset and clicks the 'add' button on the assisting dialog.\n       */\n      _acceptPressed: function(event) {\n        var name = this.$.popupInput.value.valueOf().replace(\"\\n\", \"\").replace(\"\\t\", \"\");\n        var ifvar = 0;\n        if(this.speaker.PresetNames.length > 0) {\n          for(var i = 0; i < this.speaker.PresetNames.length; i++) {\n            if(name.toLowerCase() == this.speaker.PresetNames[i].valueOf().toLowerCase()) {\n              //console.log(\"same name dude\");\n              ifvar++;\n            }\n          }\n        }\n\n        if(ifvar > 0) {\n          //console.log(\"we are in here right now\");\n          this.err = \"Invalid name: Name already taken\";\n          this.$.toasty.text = this.err;\n          this.$.toasty.show();\n        } else {\n          this.$.addPresetAjax.body = {\n            \"speaker\": this.speakerId,\n            \"name\": name,\n            \"type\": getValues(),\n            \"constants\": iirConstants.join(\" \"),\n          };\n\n          //console.log(iirConstants.join(\" \"));\n\n          //console.log(\"addPresetAjax:\", addPresetAjax.body);\n          this.$.addPresetAjax.generateRequest();\n\n          this.$.dialog.toggle();\n\n          this.$.toasty.text = \"Added preset: \" + name + \" \" + iirConstants.join(\", \");\n          //console.log(this.$.toasty.text);\n\n          this.$.toasty.show();\n\n          temp = document.createElement(\"paper-item\");\n          temp.setAttribute(\"value\", name);\n          temp.setAttribute(\"id\", name);\n          temp.innerHTML = name;\n          Polymer.dom(this.$.equalizerListbox).appendChild(temp);\n\n          var length = this.speaker.Equalizer.length;\n          //console.log(length);\n\n          //console.log(iirConstants);\n\n          var iirConstantsCopy = iirConstants.slice();\n\n          //console.log(\"iirConstantsCopy: \", iirConstantsCopy);\n          this.speaker.Equalizer.push(iirConstants.slice());\n          //}\n\n          this.speaker.PresetNames[this.speaker.PresetNames.length] = name;\n\n          //console.log(this.speaker.Equalizer);\n\n          this.$.equalizerListbox.selected = name;\n          this.$.popupInput.value = \"\";\n        }\n      },\n\n      /**\n       * This function dismisses the dialog and resets the selected preset.\n       */\n      _cancelPressed: function(event) {\n        this.$.equalizerListbox.selected = -1;\n        //console.log(lastSelected);\n      },\n\n      /**\n       * This function is used when the the user accepts the implications of their selection using the 'switch' button on the dialog.\n       */\n      _switchPressed: function(event) {\n        this.$.changeEQModeAjax.body = {\n          \"speaker\":  this.speakerId,\n          \"mode\":     getValues(),\n        };\n\n        this.$.changeEQModeAjax.generateRequest();\n\n        this.$.switchingEQModeDialog.toggle();\n        lastEQMode = this.$.equalizerSelector.selected;\n        //console.log(lastEQMode);\n      },\n\n      /**\n       * This function is used when the user decided against switching equalizers and clicks the cancel button on the switch dialog.\n       */\n      _cancelSwitchPressed: function(event) {\n        switch(lastEQMode) {\n          case \"masking\":\n            musicMenu.style.visibility = \"hidden\";\n            equalizerMenu.style.visibility = \"visible\";\n            break;\n\n          case \"music\":\n            musicMenu.style.visibility = \"visible\";\n            equalizerMenu.style.visibility = \"hidden\";\n            break;\n\n          default:\n            //console.log(\"fuck me\");\n        }\n        this.$.equalizerSelector.selected = lastEQMode;\n      },\n\n      listeners: {\n        'equalizerListbox.iron-select': '_presetSelectionChanged'\n      },\n\n      /**\n       * PresetSelectionChanged is fired when the user selects a new preset that is then used to set the equalizer to the corresponding values.\n       */\n      _presetSelectionChanged: function(event) {\n        //console.log(this.speakerId);\n        //console.log(this.speaker);\n\n        var selected = this.$.equalizerListbox.selected.valueOf().toLowerCase().replace(\"\\n\", \"\");\n\n        if(selected == \"currently applied\") {\n          this.$.toasty.text = \"Currently applied constants loaded! \" + iirConstants.join(\", \");\n          this.$.toasty.show();\n\n          lastSelected = this.$.equalizerListbox.selected;\n\n          for (var i = 0; i < this.speaker.CurrentPreset.length; i++) { \n            sliders[i].style.height = (this.speaker.CurrentPreset[i] + 40) * 2 + \"%\";\n            //console.log(this);\n            handles[i].style.bottom = (this.speaker.CurrentPreset[i] + 40) * 2 + \"%\";\n            $(\"#text\" + (parseInt(i) + 1)).val(this.speaker.CurrentPreset[i]);\n            iirConstants[i] = this.speaker.CurrentPreset[i];       \n          }\n        } else if(selected == \"add new preset\") {\n            var addPresetAjax = document.getElementById(\"addPresetAjax\");\n            //console.log(addPresetAjax);\n            this.$.dialog.toggle();\n        } else if(this.speaker.PresetNames.length > 0) {\n            lastSelected = this.$.equalizerListbox.selected;\n            var associationLink = -1;\n            for (k in this.speaker.PresetNames) {\n              if(selected == this.speaker.PresetNames[k].valueOf().toLowerCase()) {\n                this.$.toasty.text = this.$.equalizerListbox.selected + \" preset loaded! \" + iirConstants.join(\", \");\n                this.$.toasty.show();\n                //console.log(\"Speaker \" + this.speakerId + \" selected preset: \" + selected);\n                associationLink = k;\n                //console.log(\"associationLink\", associationLink);\n                break;\n              }\n            }\n            if(associationLink != -1) {\n              //console.log(this.speaker.Equalizer.length);\n              for (var j = 0; j < this.speaker.Equalizer[0].length; j++) {\n                sliders[j].style.height = (this.speaker.Equalizer[associationLink][j] + 40) * 2 + \"%\";\n                handles[j].style.bottom = (this.speaker.Equalizer[associationLink][j] + 40) * 2 + \"%\";\n                $(\"#text\" + (parseInt(j) + 1)).val(this.speaker.Equalizer[associationLink][j]);\n                iirConstants[j] = this.speaker.Equalizer[associationLink][j];\n              }\n            }\n          }\n      },\n      \n      resetKnob: function(elem) {\n        elem.prevTimeout = 0;\n        elem.$.volume2._resetKnob();\n      },\n\n      showToast: function() {\n        //console.log(\"gi\");\n      },\n\n      /**\n       * On ready, the function takes the equalizer constants and sets the internal equalizer and assigns the toasts to global values so that they are accessible outside the selectors scope.\n       */\n      ready: function() {\n        //console.log(\"this.$\", this.$);\n        this.internalEqualizer = this.iirConstantsString;\n        equalizerToast = this.$.equalizerToast;\n        equalizerMode = this.$.equalizerSelector;\n      }\n    });\n\n    function showToast() {\n      //console.log(\"gi\");\n    }\n\n    /**\n     * InputChanged is used when the user types a value into the text box for the slider. This function will validate that the value entered is completely numeric (ie, integer or float) and is between 10 and -40.\n     */\n    function inputChanged() {\n        var error = false;\n      $(document.getElementsByClassName(\"level\")).each(function(i) {\n        //console.log(this.value);\n        if(isNaN(this.value) || this.value == \"\" || this.value < -40 || this.value > 10) {\n          error = true;\n          sliders[i].style.background = \"#F33F31\";\n          handles[i].style.background = \"#F33F31\";\n          background[i].style.background = \"rgba(243, 63, 49, .2)\";\n          \n        } else {        \n          iirConstants[i] = parseInt(this.value);\n          sliders[i].style.background = \"#3f51b5\";\n          handles[i].style.background = \"#3f51b5\";\n          background[i].style.background = \"rgba(63, 81, 181, .2)\";\n\n          sliders[i].style.height = (iirConstants[i] + 40) * 2 + \"%\";\n          handles[i].style.bottom = (iirConstants[i] + 40) * 2 + \"%\";\n        }\n      });\n        //console.log(error);\n\n        if(error == false) {\n          isThereAnError = false;\n        } else {\n          isThereAnError = true;\n        }\n\n        //console.log(isThereAnError);\n    }\n\n  var MIN_WIDTH_SUPPORTED = 0;\n  var MIN_HEIGHT_SUPPORTED = 0;\n\n  if($(window).width() > MIN_WIDTH_SUPPORTED || $(window).height() > MIN_HEIGHT_SUPPORTED) {\n    $(function() {\n      $(\".custom_slider\").each(function(i) {\n        //console.log(\"this is me, the eq: \", i);\n        var texts = $(\"#text\" + (i + 1) + \":nth-child(1)\");\n        $(this).slider({\n          orientation: \"vertical\",\n          range: \"min\",\n          step: .01,\n          min: -40,\n          max: 10,\n          value: 0,\n          slide: function( event, ui) {\n            isThereAnError = false;\n            sliders[i].style.background = \"#3f51b5\";\n            handles[i].style.background = \"#3f51b5\";\n            background[i].style.background = \"rgba(63, 81, 181, .2)\";\n            //console.log(texts);\n            $(texts[0]).val(ui.value);\n\n            iirConstants[i] = ui.value;\n          }\n        });\n        $(texts[0]).val($(\".custom > .custom_slider\").slider(\"value\"));\n        //console.log(texts);\n      });\n    });\n  } else {\n      //console.log(\"there is not enough space to display the equalizer\");     \n    }\n  $(window).resize(function() {\n    if($(window).width() < MIN_WIDTH_SUPPORTED || $(window).height() < MIN_HEIGHT_SUPPORTED) {\n      //console.log($(window).width());\n\n      //console.log(document.getElementById(\"eighty\").offsetWidth);\n    } else {\n      var custom_container = document.getElementById(\"custom_container\");\n    }\n  });\n\n"
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "equalizerToast",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~equalizerToast",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "typeFound",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~typeFound",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getValues",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~getValues",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": "GetValues is used to get the type of equalizer that is currently selected.",
    "lineNumber": 14,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "[integer]"
      ],
      "spread": false,
      "description": "[typeFound is the type of equalizer that was found in interger enumerated form]"
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lastSelected",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~lastSelected",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "isThereAnError",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~isThereAnError",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lastEQMode",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~lastEQMode",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "iirConstants",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~iirConstants",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showEqualizerSwitchDialog",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~showEqualizerSwitchDialog",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": "This function is used to show the switching dialog that notifies the user of the implications of their changes when switching equalizers.",
    "lineNumber": 63,
    "params": [
      {
        "name": "mode",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "modeChanged",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~modeChanged",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": "This function is used for changing the equalizer mode. It also takes care of some UI switching as well, such as hiding and showing the appropriate menus for the equalizers.",
    "lineNumber": 86,
    "params": [
      {
        "name": "mode",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showToast",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~showToast",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 392,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "inputChanged",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~inputChanged",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": "InputChanged is used when the user types a value into the text box for the slider. This function will validate that the value entered is completely numeric (ie, integer or float) and is between 10 and -40.",
    "lineNumber": 399,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MIN_WIDTH_SUPPORTED",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~MIN_WIDTH_SUPPORTED",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 430,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MIN_HEIGHT_SUPPORTED",
    "memberof": "rawjs/equalizer-controller.html.js",
    "longname": "rawjs/equalizer-controller.html.js~MIN_HEIGHT_SUPPORTED",
    "access": null,
    "export": false,
    "importPath": "./rawjs/equalizer-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/help-panel.html.js",
    "memberof": null,
    "longname": "rawjs/help-panel.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "  Polymer({\n    is: 'help-panel',\n    behaviors: [\n      Polymer.IronFitBehavior\n    ]\n  });\n"
  },
  {
    "__docId__": 31,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/information-viewer.html.js",
    "memberof": null,
    "longname": "rawjs/information-viewer.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n  // the name needs to be limited to 50 characters\n\n    var totalInfo = [];\n    \n    Polymer({\n      is: 'information-viewer',\n\n      behaviors: [\n        Polymer.NeonAnimatableBehavior\n      ],\n\n      properties: {\n        animationConfig: {\n          value: function() {\n            return {\n              'entry': {\n                  name: 'fade-in-animation',\n                  node: this\n                },\n              'exit': {\n                // provided by neon-animation-animations/fade-out-animation.html\n                name: 'slide-left-animation',\n                node: this\n              }\n            }\n          }\n        }\n      },\n\n      _acceptPressed: function(e) {\n        this.$.zoneDialog.toggle();\n        this.$.toast.show();\n        //console.log(\"_acceptPressed\", totalInfo);\n        var name = this.$.popupInput.value.valueOf().replace(\"\\n\", \"\").replace(\"\\t\", \"\");\n\n        // this is where we strip out the undefineds\n\n        this.$.createZoneAjax.body = {\n          // make sure that this isn't empty, do the disable button thing\n          // send the name with this too dummy\n          \"name\":     name,\n          \"speakers\": totalInfo   // stripem out, maybe we can just takem out when we show them in list\n        }\n\n        totalInfo = [];\n        document.getElementById(\"informationSpeakerHolder\").innerHTML = \"\";\n\n        //console.log(\"createZoneAjax:\", createZoneAjax.body);\n        this.$.createZoneAjax.generateRequest();\n      },\n\n      _cancelPressed: function(e) {\n      },\n\n      _createZone: function(e) {\n        this.$.zoneDialog.toggle();\n      },\n      \n      _refreshSpeaker: function(e) {\n        var speakerId = e.detail.speakerId;\n        this.featureMap[speakerId].changed();\n      },\n      \n      _assignZone: function() {\n        this._hideOverlay();\n        this.$.dialog.open();\n      },\n      \n      _hideOverlay: function() {\n        this.overlay.setPosition(undefined);\n      },\n\n      renderMap: function() {\n        //console.log(\"gi\");\n        var mapController = this;\n        mapController.featureMap = {};\n        var container = mapController.$.popup;\n        var overlay = new ol.Overlay(({\n          element: container,\n          autoPan: true,\n          autoPanAnimation: {\n            duration: 250\n          }\n        }));\n      \n        mapController.overlay = overlay;\n        \n        // Map views always need a projection.  Here we just want to map image\n        // coordinates directly to map coordinates, so we create a projection that uses\n        // the image 4 in pixels.\n        var extent = [0, 0, 2200, 1700];\n        var projection = new ol.proj.Projection({\n          code: 'pixel',\n          units: 'pixels',\n          extent: extent\n        });\n\n        var locations = this.controllers;\n        var features = new Array(locations.length);\n        for(var i = 0; i < features.length; i++) {\n            var coordinates = [locations[i].x, 1700-locations[i].y];\n            features[i] = new ol.Feature({\n              geometry: new ol.geom.Point(coordinates),\n              speaker: locations[i]\n            });\n            mapController.featureMap[locations[i].id] = features[i]\n        }\n\n        var vectorSource = new ol.source.Vector({\n            features: features\n        });\n\n        var style = {}\n\n       var allColors = [\n          /*'#795548',\n          '#ff5722',\n          '#ff9800',\n          '#ffc107',\n          //'--paper-yellow-500', this is kinda hard to see\n          '#cddc39',\n          '#8bc34a',\n          '#009688',\n          '#00bcd4',\n          '#03a9f4',\n          '#2196f3',\n          '#3f51b5',\n          '#673ab7',\n          '#9c27b0',\n          '#e91e63',*/\n          '#f44336'\n        ];\n        \n        var unusedColors = [\n          '#795548',\n          '#ff5722',\n          '#ff9800',\n          '#ffc107',\n          //'--paper-yellow-500', this is kinda hard to see\n          '#cddc39',\n          '#8bc34a',\n          '#009688',\n          '#00bcd4',\n          '#03a9f4',\n          '#2196f3',\n          '#3f51b5',\n          '#673ab7',\n          '#9c27b0',\n          '#e91e63',\n          '#f44336'\n        ];\n        var colorMap = {};\n        \n        var vectorLayer = new ol.layer.Vector({\n            source: vectorSource,\n            style: function(feature, resolution) {\n              var zone = feature.getProperties().speaker.zone.name;\n                if(!(zone in colorMap)) {\n                  var color;\n                  if(unusedColors.length > 0) {\n                    var index = Math.floor(Math.random() * unusedColors.length)\n                    color = unusedColors[index]\n                    unusedColors.splice(index, 1);\n                  } else {\n                    color = colors[Math.floor(Math.random() * colors.length)]\n                  }\n\n                  colorMap[zone] = color;\n                }\n                if(!(zone in style) || style[zone].resolution !== resolution) {\n                  style[zone] = {};\n                  style[zone].style = [new ol.style.Style({\n                        image: new ol.style.Circle({\n                            radius: 15/Math.max(resolution,1),\n                            stroke: new ol.style.Stroke({\n                                color: '#000000'\n                            }),\n                            fill: new ol.style.Fill({\n                                color: colorMap[zone]\n                            })\n                        })\n                    })];\n                    style[zone].resolution = resolution;\n                }\n                return style[zone].style;\n            }\n        });\n\n        var map = new ol.Map({\n          layers: [\n            new ol.layer.Image({\n              source: new ol.source.ImageStatic({\n                url: '/css/map.png',\n                projection: projection,\n                imageExtent: extent\n              })\n            }),\n              vectorLayer\n          ],\n          overlays: [overlay],\n          target: 'informationContainer',\n          view: new ol.View({\n            projection: projection,\n            center: ol.extent.getCenter(extent),\n            zoom: 2\n          })\n        });\n        \n        mapController.map = map;\n\n        // this is the selection handler for the box dragging\n\n        // we need to add a button if it is a touch screen\n        var box = new ol.interaction.Select();\n        map.addInteraction(box);\n\n        var selectedFeatures = box.getFeatures();\n\n        // a DragBox interaction used to select features by drawing boxes\n        var dragBox = new ol.interaction.DragBox({\n          condition: ol.events.condition.shiftKeyOnly,\n          style: new ol.style.Style({\n            stroke: new ol.style.Stroke({\n              color: [63, 81, 181, 1]\n            })\n          })\n        });\n\n        map.addInteraction(dragBox);\n\n        dragBox.on('boxend', function(e) {\n          // features that intersect the box are added to the collection of\n          // selected features, and their names are displayed in the \"info\"\n          // div\n          var info = [];\n          var extent = dragBox.getGeometry().getExtent();\n\n          //console.log(extent);\n\n          vectorSource.forEachFeatureIntersectingExtent(extent, function(feature) {\n            //console.log(feature);\n            selectedFeatures.push(feature);\n\n            // just make it grab every other one\n            info.push(feature.B.speaker.id);\n          });\n          //console.log(\"selectedFeatures: \", selectedFeatures);\n\n          // To make sure that we are no running this on times when nothing is selected\n          if (info.length > 0) {\n             //infoBox.innerHTML = info.join(', ');\n            //console.log(\"Selected speakers: \", info);\n\n            // i have a feeling that this is not very optimized\n\n            // Here we figure out what is not already in the total selected and add the ones that aren't and delete it if they are\n            for (var i = 0; i < info.length; i++) {\n              var areYouInThere = totalInfo.indexOf(info[i]);\n              if(areYouInThere == -1) {\n                totalInfo.push(info[i]); \n                //console.log(totalInfo);\n              } else {\n                //console.log(\"Speaker\", info[i], \"is already in the list of selected speakers.\");\n                delete totalInfo[areYouInThere];    // make something for delete\n\n                //console.log(totalInfo);\n              }\n            }\n\n            //console.log(\"Total selected speakers: \", totalInfo);\n            // make this a checkbox thing that will fire when checked, which means we need to keep track of two arrays?\n            \n            //console.log(\"Starting sort: \");\n            // Sort the array so that when we display it, the items are sorted\n            totalInfo = mergeSort(totalInfo);   // This mergeSort isn't any faster wtf\n\n            // Clear the speaker holder element and then reset the entities to everything that has been selected, updating the view if you will\n            informationSpeakerHolder = document.getElementById(\"informationSpeakerHolder\");\n            var innerHTML = \"\";\n            informationSpeakerHolder.innerHTML = \"\";\n            for (var k = 0; k < totalInfo.length; k++) {\n              // The selections in the total selection array take a value of 'undefined' when deleted, and we don't want those in our view, so we parse them out\n              if (totalInfo[k] !== undefined) {\n               innerHTML += \"<paper-item center-justified flex style=\\\"border-style: solid; border-radius: 5px; border-width: 1px; border-color: #3f51b5; margin: 5px;\\\"> Speaker \" + totalInfo[k] + \"</paper-item>\";\n                //Polymer.dom(speakerHolder).innerHTML = Polymer.dom(speakerHolder).innerHTML + \"<paper-item center-justified flex style=\\\"border-style: solid; border-radius: 5px; border-width: 1px; border-color: #3f51b5; margin: 5px;\\\"> Speaker \" + totalInfo[k] + \"</paper-item>\";/* + document.getElementById(\"speakerHolder\").innerHTML + \"<paper-item> Speaker \" + totalInfo[k] + \"</paper-item>\" +document.getElementById(\"speakerHolder\").innerHTML + \"<paper-item> Speaker \" + totalInfo[k] + \"</paper-item>\" +document.getElementById(\"speakerHolder\").innerHTML + \"<paper-item> Speaker \" + totalInfo[k] + \"</paper-item>\" +document.getElementById(\"speakerHolder\").innerHTML + \"<paper-item> Speaker \" + totalInfo[k] + \"</paper-item>\" +document.getElementById(\"speakerHolder\").innerHTML + \"<paper-item> Speaker \" + totalInfo[k] + \"</paper-item>\" +document.getElementById(\"speakerHolder\").innerHTML + \"<paper-item> Speaker \" + totalInfo[k] + \"</paper-item>\" +document.getElementById(\"speakerHolder\").innerHTML + \"<paper-item> Speaker \" + totalInfo[k] + \"</paper-item>\" +document.getElementById(\"speakerHolder\").innerHTML + \"<paper-item> Speaker \" + totalInfo[k];*/\n\n                // when we send it off make a new array and splice out the undefineds \n              }\n            }\n            informationSpeakerHolder.innerHTML = innerHTML;\n            //console.log(totalInfo);\n          }\n        });\n\n        // clear selection when drawing a new box and when clicking on the map\n        dragBox.on('boxstart', function(e) {\n\n          // make something that removes them from the animation here when you feel like it\n\n          //selectedFeatures.clear();\n          //infoBox.innerHTML = '&nbsp;';\n        });\n        map.on('click', function() {\n\n          //console.log(selectedFeatures);\n          selectedFeatures.clear();\n          //infoBox.innerHTML = '&nbsp;';\n        });\n\n        // this is the selection for the tooltip shit\n\n       /* var select = new ol.interaction.Select({\n          style: function(feature, resolution) {\n                var zone = feature.getProperties().speaker.zone.name;\n                return style[zone].style;\n            }\n        });\n        map.addInteraction(select);\n        select.on('select', function(e) {\n            if(e.selected.length > 0) {\n              var speaker = e.selected[0].getProperties().speaker\n\n              mapController.selected = speaker;\n              // get the point's coordinate\n              var coordinate = e.selected[0].getProperties().geometry.getCoordinates();\n              overlay.setPosition(coordinate);\n            } else {\n              // make sure the overlay is hidden\n              mapController._hideOverlay();\n            }\n            \n        }); */\n      }\n    });\n\n//console.log(\"this is me\");\n\n    function mergeSort(arr) {\n        if (arr.length < 2)\n            return arr;\n\n        var middle = parseInt(arr.length / 2);\n        var left   = arr.slice(0, middle);\n        var right  = arr.slice(middle, arr.length);\n\n        return merge(mergeSort(left), mergeSort(right));\n    }\n\n    function merge(left, right) {\n        var result = [];\n\n        while (left.length && right.length) {\n            if (left[0] <= right[0]) {\n                result.push(left.shift());\n            } else {\n                result.push(right.shift());\n            }\n        }\n\n        while (left.length)\n            result.push(left.shift());\n\n        while (right.length)\n            result.push(right.shift());\n\n        return result;\n    }\n"
  },
  {
    "__docId__": 32,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "totalInfo",
    "memberof": "rawjs/information-viewer.html.js",
    "longname": "rawjs/information-viewer.html.js~totalInfo",
    "access": null,
    "export": false,
    "importPath": "./rawjs/information-viewer.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mergeSort",
    "memberof": "rawjs/information-viewer.html.js",
    "longname": "rawjs/information-viewer.html.js~mergeSort",
    "access": null,
    "export": false,
    "importPath": "./rawjs/information-viewer.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "merge",
    "memberof": "rawjs/information-viewer.html.js",
    "longname": "rawjs/information-viewer.html.js~merge",
    "access": null,
    "export": false,
    "importPath": "./rawjs/information-viewer.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "params": [
      {
        "name": "left",
        "types": [
          "*"
        ]
      },
      {
        "name": "right",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/login-form.html.js",
    "memberof": null,
    "longname": "rawjs/login-form.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    Polymer({\n      is: 'login-form',\n\n      /**\n       * Submit takes the text fields in the login screen and sends them off to the server for validation.\n       */\n      _submit: function() {\n        var loginInfo = {\n\n        }\n        this.$.loginAjax.body = {\n          username: this.$.username.value,\n          password: this.$.password.value\n        }\n        this.$.loginAjax.generateRequest();\n      },\n\n      /**\n       * The handlelogin function is a callback for the submit function that is fired on response. The function stores the level, speakerid, and zoneid in localStorage so that it can be retrieved by other classes. The function recieves as session hash and assigns it as a session cookie.\n       */\n      _handleLogin: function(event, data, x) {\n        console.log(data.response);\n        localStorage.setItem('level', data.response.level);\n        localStorage.setItem('speakerid', data.response.speakerid);\n        localStorage.setItem('zoneid', data.response.zoneid);\n        if(data.response.hash !== undefined) {\n          var sessionCookie = data.response.hash;\n          document.cookie = \"session=\" + sessionCookie + \";\";\n          document.location.href = \"/app/\"\n        } else if (data.response.success){\n          document.location.href = \"/app/\"\n        } else {\n          console.log(data.response);\n          this.err = data.response.err;\n          this.$.toast.show();\n        }\n      }\n    });\n"
  },
  {
    "__docId__": 36,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/omaha-app.html.js",
    "memberof": null,
    "longname": "rawjs/omaha-app.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n    var zoneFlag = 0;\n    var globalZone = 0;\n\n    var localLevel = parseInt(localStorage.getItem(\"level\"));\n\n    var localSpeakerID = parseInt(localStorage.getItem(\"speakerid\"));\n    var localZoneID = parseInt(localStorage.getItem(\"zoneid\"));\n\n\n    var lastSelected = 0;\n    var zones;\n    var pagingZones;\n    var displayedZones = {};\n    \n    Polymer({\n      is: 'omaha-app',\n\n      properties: {        \n        selected: {\n          type: String,\n          value: \"map\"\n        },\n        zones: Object,\n        controllers: Object\n      },\n\n      listeners: {\n        'nav.backpressed': '_showMap',\n        'drawer.showmap': '_showMap',\n        'drawer.iron-select': '_closeDrawer',\n        'nav.toggledrawer': '_toggleDrawer',\n        'mapcontroller.speakerselected': '_speakerSelected',\n        'mapcontroller.zoneselected': '_zoneSelected',\n        'controller.equalizer.equalizerMenu.iron-select': '_presetSelectionChanged'\n        // put a mapcontroller.logresponse thing here\n      },\n\n      /**\n        * This function displays the map.\n      */\n      _showMap: function() {\n        this.selected = \"map\";\n      },\n\n      _presetSelectionChanged: function(event) {    // Why does this have event in the thing? It is not like that in volume selector\n        //console.log(\"hi\");    // This says the speakerId is undefined\n        // dont think we need this\n        },\n\n        /**\n          * This function is fired when the mapcontroller detects that a speaker was selected by the user; when the mapcontroller.speakerselected fires.\n        */\n      _speakerSelected: function(e) {\n        //console.log(\"this is where i am\");\n        //console.log(this.$);\n        var speaker = e.detail.speaker;\n        //console.log(e);\n        //console.log(speaker);\n        //console.log(localStorage.getItem(\"speakerid\"));\n\n        if(speaker === undefined) {\n          this.$.dialog.open();\n        } else if(speaker.id == localSpeakerID || speaker.zone.zoneID == localZoneID || localZoneID == 1 || localLevel > 0) {\n          this.$.controller.speaker = speaker;\n          //console.log(this.$.speaker);\n          this.$.nav.showBackArrow();\n\n          this.selected = \"speakerController\";\n\n          // Get controller object\n          var controller = document.getElementById('controller');\n\n          // Set volume levels\n          document.getElementById('volume2').value = this.$.controller.speaker.VolumeLevel[0];\n          document.getElementById('volume3').value = this.$.controller.speaker.VolumeLevel[1];\n          document.getElementById('volume4').value = this.$.controller.speaker.VolumeLevel[2];\n          document.getElementById('volume5').value = this.$.controller.speaker.VolumeLevel[3];\n\n          document.getElementById('musicMin').value = this.$.controller.speaker.LowerThreshold[0];\n          document.getElementById('musicMax').value = this.$.controller.speaker.UpperThreshold[0];\n          document.getElementById('pagingMin').value = this.$.controller.speaker.LowerThreshold[1];\n          document.getElementById('pagingMax').value = this.$.controller.speaker.UpperThreshold[1];\n          document.getElementById('maskingMin').value = this.$.controller.speaker.LowerThreshold[2];\n          document.getElementById('maskingMax').value = this.$.controller.speaker.UpperThreshold[2];\n\n          //console.log(document.getElementById('equalizerMenu'));\n\n          // Set averaging mode\n          document.getElementById('effectiveness').value = this.$.controller.speaker.Effectiveness;\n          document.getElementById('pleasantness').value = this.$.controller.speaker.Pleasantness;\n\n          // Set paging levels\n          document.getElementById('pagingvolume').value = this.$.controller.speaker.VolumeLevel[2];\n          document.getElementById(\"fadetime\").value = this.$.controller.speaker.FadeTime;\n          document.getElementById(\"fadelevel\").value = this.$.controller.speaker.FadeLevel;\n\n          // Set equalizer bands\n          var sliders = document.getElementsByClassName(\"ui-slider-range ui-widget-header ui-corner-all ui-slider-range-min\");\n          var handles = document.getElementsByClassName(\"ui-slider-handle ui-state-default ui-corner-all\");\n\n          for (i in controller.speaker.CurrentPreset) {   // this was \"current\" for some reason\n            sliders[i].style.height = (controller.speaker.CurrentPreset[i] + 40) * 2 + \"%\";    // why does this have to be lower case\n            handles[i].style.bottom = (controller.speaker.CurrentPreset[i] + 40) * 2 + \"%\";\n            $(\"#text\" + (parseInt(i) + 1)).val(controller.speaker.CurrentPreset[i]);\n            iirConstants[i] = controller.speaker.CurrentPreset[i];\n          }\n          for (var i = 0; i < controller.speaker.CurrentMusicPreset.length; i++) {   // this was \"current\" for some reason\n            //console.log(\"I am here\");\n            sliders[i + 21].style.height = (controller.speaker.CurrentMusicPreset[i] + 40) * 2 + \"%\";\n            handles[i + 21].style.bottom = (controller.speaker.CurrentMusicPreset[i] + 40) * 2 + \"%\";\n            $(\"#text\" + (parseInt(i + 21) + 1)).val(controller.speaker.CurrentMusicPreset[i]);\n            iirConstants[i + 21] = controller.speaker.CurrentMusicPreset[i];\n          }\n          for (var i = 0; i < controller.speaker.CurrentPagingPreset.length; i++) {   // this was \"current\" for some reason\n            //console.log(\"I am here\");\n            sliders[i + 42].style.height = (controller.speaker.CurrentPagingPreset[i] + 40) * 2 + \"%\";\n            handles[i + 42].style.bottom = (controller.speaker.CurrentPagingPreset[i] + 40) * 2 + \"%\";\n            $(\"#text\" + (parseInt(i + 42) + 1)).val(controller.speaker.CurrentPagingPreset[i]);\n            iirConstants[i + 42] = controller.speaker.CurrentPagingPreset[i];\n          }\n\n          for (var i = 0; i < this.$.controller.speaker.CurrentTarget.length; i++) {\n            dataArray[i] = this.$.controller.speaker.CurrentTarget[i];\n\n            dataArrayZone[i] = 0;\n          }\n\n          var equalizerListbox = document.getElementById(\"equalizerListbox\");\n          //console.log(Polymer.dom(equalizerListbox).children);\n\n          var motherPolymer = Polymer.dom(equalizerListbox).children; \n\n          // Remove the paper-items from the last time and the other speakers, basically throwing away the stuff that we dont need\n          if(motherPolymer.length > 1) {\n            for (var i = motherPolymer.length - 1; i > 1; i--)\n              Polymer.dom(equalizerListbox).removeChild(motherPolymer[i]);\n          }\n\n          // Injecting the paper-items for the presets\n\n          if(controller.speaker.PresetNames.length > 0) {\n            for (i in controller.speaker.PresetNames) {\n              temp = document.createElement(\"paper-item\");\n              temp.setAttribute(\"value\", controller.speaker.PresetNames[i].valueOf().replace(\"\\n\", \"\"));\n              temp.setAttribute(\"id\", controller.speaker.PresetNames[i].valueOf().replace(\"\\n\", \"\"));\n              // temp.setAttribute(\"speakerId\", controller.speaker.speakerId); try doing some optimization stuff with the speakerId\n              temp.innerHTML = controller.speaker.PresetNames[i].valueOf().replace(\"\\n\", \"\");\n              Polymer.dom(equalizerListbox).appendChild(temp);\n            }\n          }\n\n\n          var musicListbox = document.getElementById(\"musicListbox\");\n          //console.log(Polymer.dom(musicListbox).children);\n          var motherPolymer = Polymer.dom(musicListbox).children; \n\n\n          // Remove the paper-items from the last time and the other speakers, basically throwing away the stuff that we dont need\n          if(motherPolymer.length > 1) {\n            for (var i = motherPolymer.length - 1; i > 1; i--)\n              Polymer.dom(musicListbox).removeChild(motherPolymer[i]);\n          }\n\n          if(controller.speaker.MusicPresetNames.length > 0) {\n            for (i in controller.speaker.MusicPresetNames) {\n              temp = document.createElement(\"paper-item\");\n              temp.setAttribute(\"value\", controller.speaker.MusicPresetNames[i].valueOf().replace(\"\\n\", \"\"));\n              temp.setAttribute(\"id\", controller.speaker.MusicPresetNames[i].valueOf().replace(\"\\n\", \"\"));\n              temp.innerHTML = controller.speaker.MusicPresetNames[i].valueOf().replace(\"\\n\", \"\");\n              Polymer.dom(musicListbox).appendChild(temp);\n            }\n          }\n\n\n          \n          var targetListbox = document.getElementById(\"targetListbox\");\n          //console.log(Polymer.dom(targetListbox).children);\n          motherPolymer = Polymer.dom(targetListbox).children; \n\n          // Remove the paper-items from the last time and the other speakers, basically throwing away the stuff that we dont need\n          if(motherPolymer.length > 1) {\n            for (var i = motherPolymer.length - 1; i > 1; i--)\n              Polymer.dom(targetListbox).removeChild(motherPolymer[i]);\n          }\n\n          if(controller.speaker.TargetNames.length > 0) {\n            for (i in controller.speaker.TargetNames) {\n              temp = document.createElement(\"paper-item\");\n              temp.setAttribute(\"value\", controller.speaker.TargetNames[i].valueOf().replace(\"\\n\", \"\"));\n              temp.setAttribute(\"id\", controller.speaker.TargetNames[i].valueOf().replace(\"\\n\", \"\"));\n              temp.innerHTML = controller.speaker.TargetNames[i].valueOf().replace(\"\\n\", \"\");\n              Polymer.dom(targetListbox).appendChild(temp);\n            }\n          }\n        } else {\n          this.$.errorNoAccessToast.innerHTML = \"You only have access to\";\n          if(localSpeakerID > 0) {\n            this.$.errorNoAccessToast.innerHTML += \" speaker \" + localSpeakerID;\n            if(localZoneID > 0)\n              this.$.errorNoAccessToast.innerHTML += \" and zone \" + localZoneID;\n          }\n          else if(localZoneID > 0)\n            this.$.errorNoAccessToast.innerHTML += \" zone \" + localZoneID;\n          else\n            this.$.errorNoAccessToast.innerHTML = \"You don't have access to anything!\";\n\n          this.$.errorNoAccessToast.duration = 2000;\n          this.$.errorNoAccessToast.show();\n          //console.log(\"{username} does not have access to this speaker\");\n\n        }\n    var basic_container = document.getElementById(\"basic_container\");\n    var card = document.getElementById(\"card\");\n    basic_container.style.marginLeft = (Math.abs(card.offsetWidth - basic_container.offsetWidth) / 2) - 28 + \"px\";\n\n      },\n      \n      /**\n       * This function is fired when a zone is selected. It will go through and inject all the information pertaining to the zone into the controller.\n       */\n      _zoneSelected: function(e) {\n        var zone = e.detail.zone;\n        this.$.zoneController.zone = zone;\n        this.selected = \"zoneController\"\n        this.$.nav.showBackArrow();\n\n        var zoneVolumePage = document.getElementById(\"volumeZone\"); \n        //console.log(volumeZone, this.volumeZone);\n\n        // Set volume levels\n        volumeZone.$.volume2.value = zone.VolumeLevel[0];\n        volumeZone.$.volume3.value = zone.VolumeLevel[1];\n        volumeZone.$.volume4.value = zone.VolumeLevel[2];\n        volumeZone.$.volume5.value = zone.VolumeLevel[3];\n\n        volumeZone.$.musicMin.value = zone.LowerThreshold[0];\n        volumeZone.$.pagingMin.value = zone.LowerThreshold[1];\n        volumeZone.$.maskingMin.value = zone.LowerThreshold[2];\n        volumeZone.$.musicMax.value = zone.UpperThreshold[0];\n        volumeZone.$.pagingMax.value = zone.UpperThreshold[1];\n        volumeZone.$.maskingMax.value = zone.UpperThreshold[2];\n\n        averagingZone.$.effectiveness.value = zone.effectiveness;\n        averagingZone.$.pleasantness.value = zone.pleasantness;\n\n        var targetZoneChildren = targetZone.$.adjustment.children;\n        \n        for(var i = 0; i < targetZoneChildren.length; i++) {\n          targetZoneChildren[i].value = zone.currentTarget[i];\n        }\n        redrawOnInputZone();\n\n        var levelZones = document.getElementsByClassName(\"levelZone\");\n        var i = 0;\n\n        for(; i < levelZones.length / 3; i++) {\n          levelZones[i].value = zone.currentPreset[i];\n          sliders[i + 63].style.height = (zone.currentPreset[i] + 40) * 2 + \"%\";\n          handles[i + 63].style.bottom = (zone.currentPreset[i] + 40) * 2 + \"%\";\n        }\n\n        for(; i < levelZones.length / 3; i++) {\n          levelZones[i].value = zone.currentMusicPreset[i];\n          sliders[i + 84].style.height = (zone.currentPreset[i] + 40) * 2 + \"%\";\n          handles[i + 84].style.bottom = (zone.currentPreset[i] + 40) * 2 + \"%\";\n        }\n\n        for(; i < levelZones.length / 3; i++) {\n          levelZones[i].value = zone.currentPagingPreset[i];\n          sliders[i + 105].style.height = (zone.currentPreset[i] + 40) * 2 + \"%\";\n          handles[i + 105].style.bottom = (zone.currentPreset[i] + 40) * 2 + \"%\";\n        }\n\n        pagingZone.$.fadetime.value = zone.PagingLevel[0];\n        pagingZone.$.fadelevel.value = zone.PagingLevel[1];\n        pagingZone.$.pagingvolume.value = zone.VolumeLevel[2];\n\n\n        // Test for null / undefined values and set them to a value\n        if(zone.Equalizer == undefined) {\n          zone.Equalizer = [];\n        }\n\n        if(zone.MusicEqualizer == undefined) {\n          zone.MusicEqualizer = [];\n        }\n\n        if(zone.MusicPresetNames == undefined) {\n          zone.MusicPresetNames = [];\n        }\n\n        if(zone.PagingEqualizer == undefined) {\n          zone.PagingEqualizer = [];\n        }\n\n        if(zone.PagingPresetNames == undefined) {\n          zone.PagingPresetNames = [];\n        }\n\n        if(zone.PresetNames == undefined) {\n          zone.PresetNames = [];\n        }\n\n        if(zone.Target == undefined) {\n          zone.Target = [];\n        }\n\n        if(zone.TargetNames == undefined) {\n          zone.TargetNames = [];\n        }\n        \n\n        //console.log(\"its zonerino time\", zone);\n      },\n\n      /**\n       * This function sets the basic controller up, sets up the zone options in the scrollbox, as well as calling for the rendering of the maps.\n       */\n      _initializeStatus: function(event, data) {\n\n        //console.log(\"data\", data.response);\n\n\n        var speakers = [];\n        var speakersJustID = [];\n\n        var callingInnerHTMLString = \"\";\n        var innerHTMLSpeakersString = \"\";\n\n        var innerHTMLString = \"\";\n        zones = data.response.zones;\n        //console.log(zones);\n        for (var i = 0; i < zones.length; i++) {\n          displayedZones[zones[i].name] = undefined;\n        }\n        var zoneListbox = document.querySelector(\"#zoneListbox\");\n        zoneListbox.innerHTML = \"\";\n\n        //console.log(\"zones\", zones);\n\n        zones.forEach(function(zone){\n          zone.speakers.forEach(function(speaker){\n            speaker.zone = zone;\n          });\n        })\n\n        callingInnerHTMLString += \"<paper-item center-justified flex class=\\\"pagingZoneStyle\\\"><font style=\\\"text-align: center; width: 100%; font-weight: bold;\\\">Masking Zones:</font></paper-item>\";\n        //console.log(data.response);\n        for(var i = 0; i < zones.length; i++) {\n          ////console.log(zones);\n          innerHTMLString += \"<paper-item center-justified flex ><font style=\\\"width: 100%; text-align: center;\\\">\" + zones[i].name + \"</font></paper-item>\";\n          callingInnerHTMLString += \"<paper-item center-justified flex id=\\\"\" + zones[i].name + \"\\\" class=\\\"pagingZoneStyle\\\" onclick=\\\"updateViewForSelectedSpeakers(this)\\\"><font style=\\\"text-align: center; width: 100%;\\\">\" + zones[i].name + \"</font></paper-item>\";\n\n          for (var k = 0; k < zones[i].speakers.length; k++) {\n            var isItInYetThatsWhatSheSaid = speakersJustID.indexOf(zones[i].speakers[k].id);\n            if(isItInYetThatsWhatSheSaid == -1) {\n              speakers.push(zones[i].speakers[k]);\n              speakersJustID.push(zones[i].speakers[k].id);\n            } else {\n              speakers[isItInYetThatsWhatSheSaid].zone = zones[i].speakers[k].zone;\n            }\n          }\n        }\n        zoneListbox.innerHTML = innerHTMLString;\n\n\n        innerHTMLString = \"\";\n        pagingZones = data.response.pagingZones;\n        pagingZoneListbox.innerHTML = \"\";\n\n        pagingZones.forEach(function(pagingZone){\n          pagingZone.speakers.forEach(function(speaker){\n            speaker.pagingZone = pagingZone;\n          });\n        })\n\n        callingInnerHTMLString += \"<paper-item center-justified flex><font style=\\\"text-align: center; width: 100%;\\\"></font></paper-item>\";\n        callingInnerHTMLString += \"<paper-item center-justified flex class=\\\"pagingZoneStyle\\\"><font style=\\\"text-align: center; width: 100%; font-weight: bold;\\\">Paging Zones:</font></paper-item>\";\n        \n        for(var i = 0; i < pagingZones.length; i++) {\n          displayedZones[pagingZones[i].name] = undefined;\n          innerHTMLString += \"<paper-item id=\\\"\" + pagingZones[i].name + \"\\\" value=\\\"\" + pagingZones[i].name + \"\\\"center-justified flex ><font style=\\\"width: 100%; text-align: center;\\\">\" + pagingZones[i].name + \"</font></paper-item>\";\n\n          callingInnerHTMLString += \"<paper-item id=\\\"\" + pagingZones[i].name + \"\\\" value=\\\"\" + pagingZones[i].name + \"\\\" center-justified flex class=\\\"pagingZoneStyle\\\" onclick=\\\"updateViewForSelectedSpeakers(this)\\\"><font style=\\\"text-align: center; width: 100%;\\\">\" + pagingZones[i].name + \"</font></paper-item>\";\n\n          for (var k = 0; k < pagingZones[i].speakers.length; k++) {\n            var isItInYetThatsWhatSheSaid = speakersJustID.indexOf(pagingZones[i].speakers[k].id);\n            if(isItInYetThatsWhatSheSaid == -1) {\n              speakers.push(pagingZones[i].speakers[k]);\n              speakersJustID.push(pagingZones[i].speakers[k].id);\n            } else {\n              speakers[isItInYetThatsWhatSheSaid].pagingZone = pagingZones[i].speakers[k].pagingZone;\n            }\n          }\n        } \n        pagingZoneListbox.innerHTML = innerHTMLString;\n\n        var targetListbox = document.getElementById(\"targetListbox\");\n\n        callingInnerHTMLString += \"<paper-item center-justified flex><font style=\\\"text-align: center; width: 100%;\\\"></font></paper-item>\";\n        callingInnerHTMLString += \"<paper-item center-justified flex class=\\\"pagingZoneStyle\\\"><font style=\\\"text-align: center; width: 100%; font-weight: bold;\\\">Named Speakers:</font></paper-item>\";\n        callingInnerHTMLString += \"<paper-item center-justified flex class=\\\"pagingZoneStyle\\\" onclick=\\\"updateViewForSelectedSpeakers(this)\\\"><font style=\\\"text-align: center; width: 100%;\\\">Dummy name</font></paper-item>\";\n\n\n\n        callingInnerHTMLString += \"<paper-item center-justified flex><font style=\\\"text-align: center; width: 100%;\\\"></font></paper-item>\";\n        callingInnerHTMLString += \"<paper-item center-justified flex class=\\\"pagingZoneStyle\\\"><font style=\\\"text-align: center; width: 100%; font-weight: bold;\\\">Speakers:</font></paper-item>\";\n\n        //console.log(zones[0].speakers[0]);\n\n        for(var k = 0; k < zones[0].speakers.length; k++) {\n          displayedZones[zones[0].speakers[k].id] = undefined;\n          callingInnerHTMLString += \"<paper-item id=\\\"\" + zones[0].speakers[k].id + \"\\\" value=\\\"\" + zones[0].speakers[k].id + \"\\\"  center-justified flex class=\\\"pagingZoneStyle\\\" onclick=\\\"updateViewForSelectedSpeakers(this)\\\"><font style=\\\"text-align: center; width: 100%;\\\">Speaker \" + zones[0].speakers[k].id + \"</font></paper-item>\";\n        }\n\n        var pagingSpeakerHolder = document.querySelector(\"#pagingSpeakerHolder\");    \n        pagingSpeakerHolder.innerHTML = callingInnerHTMLString;\n\n        //console.log(this);\n        this.controllers = speakers;\n        this.zones = zones;\n        //console.log(this.$);\n        this.$.information.renderMap();\n        this.$.pagingMap.renderMap();\n        this.$.mapcontroller.renderMap();\n        this.$.zoneMap.renderMap();\n        this.$.zoneMap.renderPagingMap();\n      },\n\n      _showAccountCreation: function() {\n        this.selected = \"accountCreation\";\n        this.$.nav.showAccountCreation = false;\n      },\n\n      /**\n       * This function toggles the drawer on the left side of the website.\n       */\n      _toggleDrawer: function() {\n        this.$.panel.togglePanel();\n      },\n      \n      /**\n       * This function closes the drawer on the left side.\n       */\n      _closeDrawer: function() {\n        this.$.panel.closeDrawer();\n      },\n      \n      /**\n       * This function will update the map size, as well as determine the selected map.\n       */\n      refreshMap: function() {\n        switch(this.$.pages.selected) {\n          case \"map\":\n          case \"pagingMap\":\n          case \"information\":\n          case \"zoneMap\":\n            var map = this.$.pages.selectedItem.map;\n            //console.log(\"THIS IS THE MAP THING THAT YOU ARE LOOKING FOR \" + map);\n            if(map !== undefined)\n              map.updateSize();\n            break;\n\n          default:\n            //console.log(\"tell someone of higher authority if you see this, like me, lol\");\n        }\n      },\n\n      /**\n       * The keep alive response is a callback for a function that schedules the speaker update querying to check whether they are still functioning or not.\n       */\n      _keepAliveResponse: function(event, data) {\n        //console.log(data.response);\n        if(data.response.status !== this.controllers[data.response.id - 1].status) { \n          updateMapForError(data.response.id, (this.controllers[data.response.id - 1].status) === 0 ? true : false);\n          this.controllers[data.response.id - 1].status = data.response.status;\n        }\n      },\n\n      /**\n       * This function loads after the webcomponents load and sets some variables up and scheduling a self-executing function that will continuously execute itself every second.\n       */\n      ready: function() {       \n        this.$.systemStatusAjax.generateRequest();\n        this.$.nav.hideBackArrow();\n        this.$.panel.forceNarrow = true;\n\n        controllerUpdateAjax = this.$.controllerUpdateAjax;\n        setUI();\n\n        // this is asynchonous and a better usage that using setInterval\n        (function keepAlive() {\n          controllerUpdateAjax.generateRequest();\n          setTimeout(keepAlive, 1000);\n        })();\n      }\n\n    });\n\n  /**\n   * This function is used to set the UI based on the permission received when the user logs in.\n   */\n  function setUI() {\n    switch(localLevel) {\n      case 0:\n        Polymer.dom(mode).removeChild(pagingButtonRC);\n        Polymer.dom(mode).removeChild(schedulingButton);\n        Polymer.dom(menu).removeChild(averagingButton);\n        Polymer.dom(menu).removeChild(accountCreation);\n        Polymer.dom(menu).removeChild(mapForZone);\n        Polymer.dom(menu).removeChild(mapForPaging);\n        // Just let it fall through\n\n      case 1:\n        Polymer.dom(mode).removeChild(targetButton);\n        Polymer.dom(mode).removeChild(equalizerButton);\n        break;\n\n      default:\n        //console.log(\"lel\");\n    }\n  }\n  \n"
  },
  {
    "__docId__": 37,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "zoneFlag",
    "memberof": "rawjs/omaha-app.html.js",
    "longname": "rawjs/omaha-app.html.js~zoneFlag",
    "access": null,
    "export": false,
    "importPath": "./rawjs/omaha-app.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "globalZone",
    "memberof": "rawjs/omaha-app.html.js",
    "longname": "rawjs/omaha-app.html.js~globalZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/omaha-app.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "localLevel",
    "memberof": "rawjs/omaha-app.html.js",
    "longname": "rawjs/omaha-app.html.js~localLevel",
    "access": null,
    "export": false,
    "importPath": "./rawjs/omaha-app.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "localSpeakerID",
    "memberof": "rawjs/omaha-app.html.js",
    "longname": "rawjs/omaha-app.html.js~localSpeakerID",
    "access": null,
    "export": false,
    "importPath": "./rawjs/omaha-app.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "localZoneID",
    "memberof": "rawjs/omaha-app.html.js",
    "longname": "rawjs/omaha-app.html.js~localZoneID",
    "access": null,
    "export": false,
    "importPath": "./rawjs/omaha-app.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lastSelected",
    "memberof": "rawjs/omaha-app.html.js",
    "longname": "rawjs/omaha-app.html.js~lastSelected",
    "access": null,
    "export": false,
    "importPath": "./rawjs/omaha-app.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "displayedZones",
    "memberof": "rawjs/omaha-app.html.js",
    "longname": "rawjs/omaha-app.html.js~displayedZones",
    "access": null,
    "export": false,
    "importPath": "./rawjs/omaha-app.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setUI",
    "memberof": "rawjs/omaha-app.html.js",
    "longname": "rawjs/omaha-app.html.js~setUI",
    "access": null,
    "export": false,
    "importPath": "./rawjs/omaha-app.html.js",
    "importStyle": null,
    "description": "This function is used to set the UI based on the permission received when the user logs in.",
    "lineNumber": 504,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/omaha-drawer.html.js",
    "memberof": null,
    "longname": "rawjs/omaha-drawer.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    Polymer({\n      is: 'omaha-drawer',\n\n      properties: {\n        selected: {\n          type: String,\n          notify: true\n        }\n      }\n    });\n"
  },
  {
    "__docId__": 46,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/omaha-navbar.html.js",
    "memberof": null,
    "longname": "rawjs/omaha-navbar.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    Polymer({\n      is: 'omaha-navbar',\n\n      properties: {\n        selected: {\n          type: Number,\n          notify: true\n        }\n      },\n\n      _toggleDrawerPressed: function() {\n        this.fire('toggledrawer', {});\n      },\n\n      _createAccountPressed: function() {\n        this.fire('showaccountcreation', {})\n        this.showBackArrow();\n      },\n\n      _backPressed: function() {\n        this.fire('backpressed', {});\n        this.hideBackArrow();\n      },\n\n      showBackArrow: function() {\n        this.$.back.icon = \"arrow-back\";\n        this.$.back.disabled = false;\n      },\n\n      hideBackArrow: function() {\n        this.$.back.icon = \"none\";\n        this.$.back.disabled = true;\n      }\n    });\n"
  },
  {
    "__docId__": 47,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/open-map-controller.html.js",
    "memberof": null,
    "longname": "rawjs/open-map-controller.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n  var LowerThreshold = [];\n  var UpperThreshold = [];\n\n  $(document).ready(function() {\n    //console.log($(document.getElementById(\"goodOrBadFont\")).innerWidth(), $(document.getElementById(\"selectedSpeakers\")).innerWidth());\n  });\n\n\n  $(window).resize(function() {\n  });\n\n  var savedResolution;\n  var savedStyle = [];\n  var savedStyle_i = 1;\n\n  var controllers = []; \n  var renderMapCopy;\n  var vectorLayerCopy;\n  var goodCircle = document.getElementById(\"goodCircle\");\n  var goodFont = document.getElementById(\"goodFont\"); \n  var badCircle = document.getElementById(\"badCircle\");\n  var badFont = document.getElementById(\"badFont\"); \n\n    Polymer({\n      is: 'open-map-controller',\n\n      behaviors: [\n        Polymer.NeonAnimatableBehavior\n      ],\n\n      properties: {\n        animationConfig: {\n          value: function() {\n            return {\n              'entry': {\n                  name: 'fade-in-animation',\n                  node: this\n                },\n              'exit': {\n                name: 'slide-left-animation',\n                node: this\n              }\n            }\n          }\n        }\n      },\n      \n      _selectSpeaker: function() {\n        this._hideOverlay();\n\n        //console.log(\"i am fired\");\n      },\n      \n      _selectZone: function() {\n        this._hideOverlay();\n      },\n      \n      _hideOverlay: function() {\n        //console.log(this.overlay);\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(\"this is the speaker response\", data.response);\n        var a = document.getElementById('speaker-tooltip');\n  \n        a.speaker.name = data.response.name;\n        a.speaker.VolumeLevel[0] = data.response.volume;\n        a.speaker.VolumeLevel[1] = data.response.music;\n        a.speaker.VolumeLevel[2] = data.response.paging;\n        a.speaker.VolumeLevel[3] = data.response.masking;\n\n        a.speaker.LowerThreshold = [];\n        a.speaker.UpperThreshold = [];\n\n        a.speaker.LowerThreshold[0] = data.response.lowerMusicThreshold\n        a.speaker.UpperThreshold[0] = data.response.upperMusicThreshold\n        a.speaker.LowerThreshold[1] = data.response.lowerPagingThreshold\n        a.speaker.UpperThreshold[1] = data.response.upperPagingThreshold\n        a.speaker.LowerThreshold[2] = data.response.lowerMaskingThreshold\n        a.speaker.UpperThreshold[2] = data.response.upperMaskingThreshold\n\n        LowerThreshold[0] = data.response.lowerMusicThreshold\n        UpperThreshold[0] = data.response.upperMusicThreshold\n        LowerThreshold[1] = data.response.lowerPagingThreshold\n        UpperThreshold[1] = data.response.upperPagingThreshold\n        LowerThreshold[2] = data.response.lowerMaskingThreshold\n        UpperThreshold[2] = data.response.upperMaskingThreshold\n\n        a.speaker.Effectiveness = data.response.effectiveness;\n        a.speaker.Pleasantness = data.response.pleasantness;\n        a.speaker.FadeTime = data.response.fadetime;\n        a.speaker.FadeLevel = data.response.fadelevel;\n        a.speaker.EqualizerMode = data.response.equalizerMode;\n        a.speaker.SchedulingMode = data.response.schedulingMode;\n\n        a.speaker.Schedule = data.response.schedule;\n\n        if(a.speaker.EqualizerMode == 1) {\n          equalizerSelector.selected = \"music\";\n          lastEQMode = \"music\";\n          getValues();\n          musicMenu.style.visibility = \"visible\";\n          equalizerMenu.style.visibility = \"hidden\";\n        } else if(a.speaker.EqualizerMode == 2) {\n          equalizerSelector.selected = \"paging\"; \n          lastEQMode = \"paging\";\n          getValues();\n        }\n        //console.log(schedulingSelector);\n        speaker = a.speaker;\n\n        if(a.speaker.SchedulingMode == 0) {\n          schedulingSelector.selected = \"basic\";\n          schedulingSelectorZone.selected = \"basic\";\n          drawBasic();\n          drawBasicZone();\n        } else {\n          schedulingSelector.selected = \"advanced\";\n          schedulingSelectorZone.selected = \"advanced\";\n          drawAdvanced();\n          drawAdvancedZone();\n        }\n\n        //console.log(document.querySelector(\"#scheduling-controller\"));\n\n        //console.log(\"i have applied the selected value\", schedulingSelector.selected, schedulingSelector);\n\n        //console.log(this.$$);\n        if(a.speaker.name !== \"\") {\n          var tooltipInformation = \"<b id=\\\"name\\\">\" + a.speaker.name + \"</b><br><b id=\\\"speaker\\\">Speaker ID: \" + a.speaker.id + \"</b><br><b id=\\\"zone\\\">Zone ID: \" + a.speaker.zoneID + \"</b><br><b id=\\\"volume\\\">Volume: \" + a.speaker.VolumeLevel[0] + \"</b>\";\n          //console.log(\"i am here\");\n        } else {\n          //console.log(\"i am not here\");\n          var tooltipInformation = \"<b id=\\\"speaker\\\">Speaker ID: \" + a.speaker.id + \"</b><br><b id=\\\"zone\\\">Zone ID: \" + a.speaker.zone.zoneID + \"</b><br><b id=\\\"volume\\\">Volume: \" + a.speaker.VolumeLevel[0] + \"</b>\";\n        }\n        document.getElementById(\"tooltipInformation\").innerHTML = tooltipInformation;\n\n        //console.log(\"Response:\", data.response);\n        //console.log(\"Speaker:\", a.speaker);\n\n        a.speaker.TargetNames   = [];\n        a.speaker.CurrentTarget = [];\n\n        a.speaker.PresetNames   = [];\n        a.speaker.CurrentPreset = [];\n\n        a.speaker.MusicPresetNames   = [];\n        a.speaker.CurrentMusicPreset = [];\n\n        a.speaker.PagingPresetNames   = [];\n        a.speaker.CurrentPagingPreset = [];\n\n        a.speaker.Target        = [];\n        a.speaker.Equalizer     = [];\n\n        a.speaker.Music         = [];\n\n        for (i in data.response.TargetNames) {\n          a.speaker.TargetNames[i] = data.response.TargetNames[i].replace(\"\\n\", \"\");\n          //console.log(i, data.response.TargetNames[i]);\n        }\n\n        for (i in data.response.PresetNames) {\n          a.speaker.PresetNames[i] = data.response.PresetNames[i].replace(\"\\n\", \"\");\n          //console.log(i, data.response.PresetNames[i]);\n        }\n\n        for (i in data.response.MusicPresetNames) {\n          a.speaker.MusicPresetNames[i] = data.response.MusicPresetNames[i].replace(\"\\n\", \"\");\n          //console.log(i, data.response.MusicPresetNames[i]);\n        }\n\n        for (i in data.response.PagingPresetNames) {\n          a.speaker.PagingPresetNames[i] = data.response.PagingPresetNames[i].replace(\"\\n\", \"\");\n          //console.log(i, data.response.PagingPresetNames[i]);\n        }\n\n        for (i in data.response.CurrentPreset) {\n          a.speaker.CurrentPreset[i] = data.response.CurrentPreset[i];\n          //console.log(i, data.response.CurrentPreset[i]);\n        }\n\n        for (i in data.response.CurrentMusicPreset) {\n          a.speaker.CurrentMusicPreset[i] = data.response.CurrentMusicPreset[i];\n          //console.log(i, data.response.CurrentMusicPreset[i]);\n        } \n\n        for (i in data.response.CurrentPagingPreset) {\n          a.speaker.CurrentPagingPreset[i] = data.response.CurrentPagingPreset[i];\n          //console.log(i, data.response.CurrentPagingPreset[i]);\n        } \n\n        for (i in data.response.CurrentTarget) {\n          a.speaker.CurrentTarget[i] = data.response.CurrentTarget[i];\n          //console.log(i, data.response.CurrentTarget[i]);\n          //dataArray.push(data.response.CurrentTarget[i]);\n          dataArray[i] = a.speaker.CurrentTarget[i];\n        }\n\n        $(document.getElementsByClassName(\"inputs\")).each(function(j) {\n          this.value = dataArray[j];\n        });\n        redrawOnInput();\n\n        dataArray = [];\n\n        for(i in data.response.Equalizer) {\n          a.speaker.Equalizer[i] = data.response.Equalizer[i];\n          //console.log(data.response.PresetNames[i], data.response.Equalizer[i]);\n        }\n\n        for(i in data.response.MusicEqualizer) {\n          a.speaker.MusicEqualizer[i] = data.response.MusicEqualizer[i];\n          //console.log(data.response.MusicPresetNames[i], data.response.MusicEqualizer[i]);\n        }\n\n        for(i in data.response.PagingEqualizer) {\n          a.speaker.PagingEqualizer[i] = data.response.PagingEqualizer[i];\n          //console.log(data.response.PagingPresetNames[i], data.response.PagingEqualizer[i]);\n        }\n\n        for(i in data.response.Target) {\n          a.speaker.Target[i] = data.response.Target[i];\n          //console.log(data.response.TargetNames[i], data.response.Target[i]);\n        }\n\n        a.speaker.Response = \"true\";\n\n        //console.log(\"Speaker\", a.speaker);\n      },\n    \n      renderMap: function() {\n        var mapController = this;\n        var container = document.getElementById('popup');\n        var overlay = new ol.Overlay(({\n          element: container,\n          autoPan: true,\n          autoPanAnimation: {\n            duration: 250\n          }\n        }));\n        \n        var tt = document.getElementById('test');\n        var tooltip = new ol.Overlay(({\n          element: tt,\n          autoPan: true,\n          autoPanAnimation: {\n            duration: 250\n          }\n        }));\n        \n        mapController.overlay = overlay;\n\n        var extent = [0, 0, 2200, 1700];\n        var projection = new ol.proj.Projection({\n          code: 'pixel',\n          units: 'pixels',\n          extent: extent\n        });\n\n        var locations = this.controllers;\n        controllers = this.controllers;\n\n        var features = new Array(locations.length);\n        for(var i = 0; i < features.length; i++) {\n            var coordinates = [locations[i].x, 1700-locations[i].y];\n            var point = new ol.geom.Point(coordinates);\n            features[i] = new ol.Feature({\n              geometry: point,\n              speaker: locations[i]\n            });\n        }\n        \n        var vectorSource = new ol.source.Vector({\n            features: features\n        });\n\n        var style = {}\n        var allColors = [\n          '#3f51b5'\n        ];\n        \n        var unusedColors = [\n          '#3f51b5'\n        ];\n        var colorMap = {};\n        var vectorLayer = new ol.layer.Vector({\n            source: vectorSource,\n            style: function(feature, resolution) {\n              //console.log(feature.getProperties().speaker);\n              var zone = feature.getProperties().speaker.zone.name;\n              if(!(zone in colorMap)) {\n                var color;\n                if(unusedColors.length > 0) {\n                  var index = Math.floor(Math.random() * unusedColors.length)\n                  color = unusedColors[index]\n                  unusedColors.splice(index, 1);\n                } else {\n                  color = colors[Math.floor(Math.random() * colors.length)]\n                }\n\n                colorMap[zone] = color;\n                savedStyle[zone] = color;\n                savedStyle_i++;\n                //console.log(savedStyle);\n              }\n              if(!(zone in style) || style[zone].resolution !== resolution) {\n                style[zone] = {};\n                style[zone].style = [new ol.style.Style({\n                    image: new ol.style.Circle({\n                      radius: 15 / Math.max(resolution, 1),\n                      stroke: new ol.style.Stroke({\n                          color: '#000000'\n                      }),\n                      fill: new ol.style.Fill({\n                          color: colorMap[zone]\n                      })\n                    })\n                })];\n                style[zone].resolution = resolution;\n              }\n\n              savedResolution = resolution;\n              savedFeature = feature;\n\n              var errorStyle = new ol.style.Style({\n                image: new ol.style.Icon({\n                  src: \"/css/brokenlink.png\"\n                })\n              });\n\n              if(zone == \"default\") {\n                var speakers = feature.getProperties().speaker;\n                  if(speakers.status !== 0) {\n                    //console.log(\"updateMapForError\", speakers.id);\n\n                    feature.setStyle(errorStyle);\n                  }\n              }\n              return style[zone].style;\n            }\n        });\n\n        vectorLayerCopy = vectorLayer;\n\n        var map = new ol.Map({\n          layers: [\n            new ol.layer.Image({\n              source: new ol.source.ImageStatic({\n                url: '/css/map.png',\n                projection: projection,\n                imageExtent: extent\n              })\n            }),\n              vectorLayer\n          ],\n          overlays: [overlay, tooltip],\n          target: 'map',\n          view: new ol.View({\n            projection: projection,\n            center: ol.extent.getCenter(extent),\n            zoom: 6,\n            zoomFactor: 1.35\n          })\n        });\n        mapController.map = map;\n\n        var select = new ol.interaction.Select({\n          style: function(feature, resolution) {\n                var zone = feature.getProperties().speaker.zone.name;\n                return style[zone].style;\n            }\n        });\n\n\n        map.addInteraction(select);\n\n        select.on('select', function(e) {\n            if(e.selected.length > 0) {\n              //console.log(\"Selected\");\n              var speaker = e.selected[0].getProperties().speaker\n              //console.log(e)\n              //console.log(speaker);\n\n              var frontendSpeakerUpdateAjax = document.getElementById(\"frontendSpeakerUpdateAjax\");\n              //console.log(\"If I do say myself sir, this is a pretty snazzy way to go about doing this!\");\n              frontendSpeakerUpdateAjax.body = {\n                \"speaker\": speaker.id\n              };\n              //console.log(\"frontendSpeakerUpdateAjax \", frontendSpeakerUpdateAjax.body);\n              frontendSpeakerUpdateAjax.generateRequest(); \n\n              mapController.selected = speaker;\n              var coordinate = e.selected[0].getProperties().geometry.getCoordinates();\n\n              //console.log(coordinate)\n\n              //console.log(speaker);\n\n              overlay.setPosition(coordinate);\n\n              //console.log(colorMap);\n            } else {\n              mapController._hideOverlay();\n            }\n        });\n        \n        var hoverInteraction = new ol.interaction.Select({\n            condition: ol.events.condition.pointerMove,\n            style: function(feature, resolution) {\n                return style.style;\n            }\n        });\n        hoverInteraction.on('select', function(e){\n          if(e.selected.length > 0) {\n              //console.log(\"Selected\");\n              var speaker = e.selected[0].getProperties().speaker;\n              //console.log(speaker);\n              var coordinate = e.selected[0].getProperties().geometry.getCoordinates();\n              tooltip.setPosition(coordinate);\n            }\n        })\n      }\n    });\n\n  function updateMapForError(id, change) {\n    var features = vectorLayerCopy.getSource().getFeatures();\n    var i = 0;\n    for(i = 0; i < features.length; i++) {\n      if(features[i].getProperties().speaker.id == id) {\n        //console.log(features[i].getProperties().speaker);\n        break;\n      }\n    }\n\n    //console.log(\"i: \", i);\n    //console.log(\"features of i\", features[i].getProperties().speaker);\n\n    var old_style = features[i].getStyle(style);\n\n    //console.log(features);\n    var style;\n\n    if(change) {\n      style = new ol.style.Style({\n        image: new ol.style.Icon({\n          src: \"/css/brokenlink.png\"\n        })\n      });\n      //console.log(statusCircle);\n\n      // update the system status icon\n      goodCircle.style.visibility = \"hidden\";\n      badCircle.style.visibility = \"visible\";\n      goodFont.style.visibility = \"hidden\";\n      badFont.style.visibility = \"visible\";\n\n      var badCircleText = document.getElementById(\"badCircleText\");\n      var badFontText = document.getElementById(\"badFontText\");\n\n      if(badCircleText.innerHTML.length != 0) {\n        badCircleText.innerHTML = \"There was an error trying to retrieve the status for speaker \" + features[i].getProperties().speaker.id;\n      } else {\n        badCircleText.innerHTML += \", speaker \" + features[i].getProperties().speaker.id; \n      }\n      if(badFontText.innerHTML.length != 0) {\n        badFontText.innerHTML = \"There was an error trying to retrieve the status for speaker \" + features[i].getProperties().speaker.id;\n\n      } else {\n        badFontText.innerHTML += \", speaker \" + features[i].getProperties().speaker.id; \n      }\n    } else {\n       style = new ol.style.Style({\n                    image: new ol.style.Circle({\n                      radius: 15 / Math.max(savedResolution, 1),\n                      stroke: new ol.style.Stroke({\n                          color: '#000000'\n                      }),\n                      fill: new ol.style.Fill({\n                          color: savedStyle[features[i].getProperties().speaker.zone.name]\n                      })\n                    })\n                });\n\n      var badCircleText = document.getElementById(\"badCircleText\");\n      var badFontText = document.getElementById(\"badFontText\");\n      badCircleText.innerHTML = \"\";\n      badFontText.innerHTML = \"\";\n       \n      goodCircle.style.visibility = \"visible\";\n      badCircle.style.visibility = \"hidden\";\n      goodFont.style.visibility = \"visible\";\n      badFont.style.visibility = \"hidden\";\n    }\n\n    features[i].setStyle(style);\n    vectorLayerCopy.changed();\n  }\n\n"
  },
  {
    "__docId__": 48,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LowerThreshold",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~LowerThreshold",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UpperThreshold",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~UpperThreshold",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "savedStyle",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~savedStyle",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "savedStyle_i",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~savedStyle_i",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "controllers",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~controllers",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "goodCircle",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~goodCircle",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "goodFont",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~goodFont",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "badCircle",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~badCircle",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "badFont",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~badFont",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "updateMapForError",
    "memberof": "rawjs/open-map-controller.html.js",
    "longname": "rawjs/open-map-controller.html.js~updateMapForError",
    "access": null,
    "export": false,
    "importPath": "./rawjs/open-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "change",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/paging-controller-navbar.html.js",
    "memberof": null,
    "longname": "rawjs/paging-controller-navbar.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n  var map;\n  var features;\n  var mapController;\n  var idIterator = 0;\n  var currentSpeakers = [];\n\n\n  function pulsateCircle(id, coordinates) {\n    var elem = document.createElement('div');\n    elem.setAttribute('class', 'gps_ring');\n    return new ol.Overlay({\n      id: id,\n      element: elem,\n      position: coordinates,\n      positioning: 'center-center'\n    });\n  }\n\n  function findZoneIndex(zoneName) {\n    //console.log(zoneName);\n    for(var i = 0; i < zones.length; i++) {\n      if(zones[i].name === zoneName) {        \n        for(var k = 0; k < zones[i].speakers.length; k++) {\n          currentSpeakers[k] = zones[i].speakers[k].id;\n        }\n        //console.log(\"found a name\");\n        return i;\n      }\n    }\n\n    for(var i = 0; i < pagingZones.length; i++) {\n      if(pagingZones[i].name === zoneName) {\n        //console.log(pagingZones[i]);\n        for(var k = 0; k < pagingZones[i].speakers.length; k++) {\n          currentSpeakers[k] = pagingZones[i].speakers[k].id;\n        }\n        return i;\n      }\n    }\n    \n    var zoneNameInt = parseInt(zoneName);\n    for(var i = 0; i < zones[0].speakers.length; i++) {\n      if(zones[0].speakers[i].id == zoneNameInt) {\n        currentSpeakers = [];\n        currentSpeakers[0] = zones[0].speakers[i].id;\n        return i;\n      }\n    }\n  }\n\n  function updateViewForSelectedSpeakers(elem) {\n    //console.log(elem.id);\n    //console.log(features);\n    //console.log(map.a);\n    var overlays = mapController.map.getOverlays();\n    //console.log(overlays);\n\n    //console.log(elem);\n    var zoneIndex = findZoneIndex(elem.id);\n    //console.log(typeof currentSpeakers);\n    //console.log(currentSpeakers, currentSpeakers.length);\n    //console.log(zoneIndex);\n    var zoneOverlayArray = [];\n    //console.log(elem.id);\n    if(displayedZones[elem.id] === undefined) {\n      elem.style.background = \"rgba(63, 81, 181, .25)\";\n\n      for(var i = 0; i < currentSpeakers.length; i++) {\n        var tempOverlay = pulsateCircle(i, features[currentSpeakers[i] - 1].getGeometry().getCoordinates());\n        tempOverlay.id = idIterator;\n        mapController.map.addOverlay(tempOverlay);\n        zoneOverlayArray.push(tempOverlay.id);\n        idIterator++;\n      }\n      displayedZones[elem.id] = zoneOverlayArray;\n      mapController.map.updateSize();\n    }\n    else {\n      elem.style.background = \"rgba(63, 81, 181, .1)\";\n\n      var overlays = mapController.map.getOverlays();\n      //console.log(overlays);\n      //console.log(overlays.a.length);\n\n      //console.log(displayedZones[elem.id]);\n      for(var j = displayedZones[elem.id].length - 1; j >= 0; j--) {\n        var elementPos = overlays.a.map(function(x) { return x.id; }).indexOf(displayedZones[elem.id][j]);\n\n        var objectFound = overlays.a[elementPos];\n        //console.log(objectFound);\n        mapController.map.removeOverlay(objectFound);\n      }\n      mapController.map.updateSize();\n      displayedZones[elem.id] = undefined;\n      currentSpeakers = [];\n    }\n    //console.log(displayedZones);\n\n    //console.log(displayedZones);\n  }\n\n  (function() {\n    $(\".pagingZoneStyle\").each(function(i) {\n      //console.log(i);\n    });\n  })();\n\n    var totalInfo = [];\n    \n    Polymer({\n      is: 'paging-controller-navbar',\n\n      behaviors: [\n        Polymer.NeonAnimatableBehavior\n      ],\n\n      properties: {\n        animationConfig: {\n          value: function() {\n            return {\n              'entry': {\n                  name: 'fade-in-animation',\n                  node: this\n                },\n              'exit': {\n                name: 'slide-left-animation',\n                node: this\n              }\n            }\n          }\n        }\n      },\n\n      _acceptPressed: function(e) {\n        this.$.zoneDialog.toggle();\n        this.$.toast.show();\n        //console.log(\"_acceptPressed\", totalInfo);\n        var name = this.$.popupInput.value.valueOf().replace(\"\\n\", \"\").replace(\"\\t\", \"\");\n\n        this.$.createPagingZoneAjax.body = {\n          \"name\":     name,\n          \"speakers\": totalInfo\n        }\n\n        totalInfo = [];\n        document.getElementById(\"pagingSpeakerHolder\").innerHTML = \"\";\n\n        //console.log(\"createPagingZoneAjax:\", createPagingZoneAjax.body);\n        this.$.createPagingZoneAjax.generateRequest();\n      },\n\n      _cancelPressed: function(e) {\n      },\n\n      _dial: function(e) {\n        this.$.zoneDialog.toggle();\n      },\n      \n      _refreshSpeaker: function(e) {\n        var speakerId = e.detail.speakerId;\n        this.featureMap[speakerId].changed();\n      },\n      \n      _assignZone: function() {\n        this._hideOverlay();\n        this.$.dialog.open();\n      },\n      \n      _hideOverlay: function() {\n        this.overlay.setPosition(undefined);\n      },\n\n      renderMap: function() {\n        mapController = this;\n        mapController.featureMap = {};\n        var container = mapController.$.popup;\n        var overlay = new ol.Overlay(({\n          element: container,\n          autoPan: true,\n          autoPanAnimation: {\n            duration: 250\n          }\n        }));\n      \n        mapController.overlay = overlay;\n\n        var extent = [0, 0, 2200, 1700];\n        var projection = new ol.proj.Projection({\n          code: 'pixel',\n          units: 'pixels',\n          extent: extent\n        });\n\n        var locations = this.controllers;\n        features = new Array(locations.length);\n        for(var i = 0; i < features.length; i++) {\n            var coordinates = [locations[i].x, 1700-locations[i].y];\n            features[i] = new ol.Feature({\n              geometry: new ol.geom.Point(coordinates),\n              speaker: locations[i]\n            });\n            mapController.featureMap[locations[i].id] = features[i]\n        }\n\n        var vectorSource = new ol.source.Vector({\n            features: features\n        });\n\n        var style = {}\n\n       var allColors = [\n          '#f44336'\n        ];\n        \n        var unusedColors = [\n          '#f44336'\n        ];\n        var colorMap = {};\n        \n        var vectorLayer = new ol.layer.Vector({\n            source: vectorSource,\n            style: function(feature, resolution) {\n              var zone = feature.getProperties().speaker.zone.name;\n                if(!(zone in colorMap)) {\n                  var color;\n                  if(unusedColors.length > 0) {\n                    var index = Math.floor(Math.random() * unusedColors.length)\n                    color = unusedColors[index]\n                    unusedColors.splice(index, 1);\n                  } else {\n                    color = colors[Math.floor(Math.random() * colors.length)]\n                  }\n\n                  colorMap[zone] = color;\n                }\n                if(!(zone in style) || style[zone].resolution !== resolution) {\n                  style[zone] = {};\n                  style[zone].style = \n                  [new ol.style.Style({\n                        image: new ol.style.Circle({\n                            radius: 15/Math.max(resolution,1),\n                            stroke: new ol.style.Stroke({\n                                color: '#000000'\n                            }),\n                            fill: new ol.style.Fill({\n                                color: colorMap[zone]\n                            })\n                        })\n                    })];\n                    style[zone].resolution = resolution;\n                }\n                return style[zone].style;\n            }\n        });\n\n        map = new ol.Map({\n          layers: [\n            new ol.layer.Image({\n              source: new ol.source.ImageStatic({\n                url: '/css/map.png',\n                projection: projection,\n                imageExtent: extent\n              })\n            }),\n              vectorLayer\n          ],\n          overlays: [overlay],\n          target: 'pagingMapContainer',\n          view: new ol.View({\n            projection: projection,\n            center: ol.extent.getCenter(extent),\n            zoom: 2\n          })\n        });\n        mapController.map = map;\n\n        var box = new ol.interaction.Select();\n\n        var selectedFeatures = box.getFeatures();\n\n        var dragBox = new ol.interaction.DragBox({\n          condition: ol.events.condition.shiftKeyOnly,\n          style: new ol.style.Style({\n            stroke: new ol.style.Stroke({\n              color: [63, 81, 181, 1]\n            })\n          })\n        });\n\n        dragBox.on('boxend', function(e) {\n          var info = [];\n          var extent = dragBox.getGeometry().getExtent();\n\n          //console.log(extent);\n\n          vectorSource.forEachFeatureIntersectingExtent(extent, function(feature) {\n            //console.log(feature);\n            selectedFeatures.push(feature);\n\n            info.push(feature.B.speaker.id);\n          });\n          //console.log(\"selectedFeatures: \", selectedFeatures);\n\n          if (info.length > 0) {\n            //console.log(\"Selected speakers: \", info);\n\n            for (var i = 0; i < info.length; i++) {\n              var areYouInThere = totalInfo.indexOf(info[i]);\n              if(areYouInThere == -1) {\n                totalInfo.push(info[i]); \n                //console.log(totalInfo);\n              } else {\n                //console.log(\"Speaker\", info[i], \"is already in the list of selected speakers.\");\n                delete totalInfo[areYouInThere];\n\n                //console.log(totalInfo);\n              }\n            }\n\n            //console.log(\"Total selected speakers: \", totalInfo);\n            \n            //console.log(\"Starting sort: \");\n            totalInfo = mergeSort(totalInfo);\n\n            pagingSpeakerHolder = document.getElementById(\"pagingSpeakerHolder\");\n            var innerHTML = \"\";\n            pagingSpeakerHolder.innerHTML = \"\";\n            for (var k = 0; k < totalInfo.length; k++) {\n              if (totalInfo[k] !== undefined) {\n               innerHTML += \"<paper-item center-justified flex style=\\\"border-style: solid; border-radius: 5px; border-width: 1px; border-color: #3f51b5; margin: 5px;\\\"> Speaker \" + totalInfo[k] + \"</paper-item>\";\n              }\n            }\n            pagingSpeakerHolder.innerHTML = innerHTML;\n            //console.log(totalInfo);\n          }\n        });\n\n        dragBox.on('boxstart', function(e) {\n\n        });\n        map.on('click', function() {\n\n          //console.log(selectedFeatures);\n          selectedFeatures.clear();\n        });\n      }\n    });\n\n    function mergeSort(arr) {\n        if (arr.length < 2)\n            return arr;\n\n        var middle = parseInt(arr.length / 2);\n        var left   = arr.slice(0, middle);\n        var right  = arr.slice(middle, arr.length);\n\n        return merge(mergeSort(left), mergeSort(right));\n    }\n\n    function merge(left, right) {\n        var result = [];\n\n        while (left.length && right.length) {\n            if (left[0] <= right[0]) {\n                result.push(left.shift());\n            } else {\n                result.push(right.shift());\n            }\n        }\n\n        while (left.length)\n            result.push(left.shift());\n\n        while (right.length)\n            result.push(right.shift());\n\n        return result;\n    }\n"
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "idIterator",
    "memberof": "rawjs/paging-controller-navbar.html.js",
    "longname": "rawjs/paging-controller-navbar.html.js~idIterator",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller-navbar.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "currentSpeakers",
    "memberof": "rawjs/paging-controller-navbar.html.js",
    "longname": "rawjs/paging-controller-navbar.html.js~currentSpeakers",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller-navbar.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "pulsateCircle",
    "memberof": "rawjs/paging-controller-navbar.html.js",
    "longname": "rawjs/paging-controller-navbar.html.js~pulsateCircle",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller-navbar.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "findZoneIndex",
    "memberof": "rawjs/paging-controller-navbar.html.js",
    "longname": "rawjs/paging-controller-navbar.html.js~findZoneIndex",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller-navbar.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "zoneName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "updateViewForSelectedSpeakers",
    "memberof": "rawjs/paging-controller-navbar.html.js",
    "longname": "rawjs/paging-controller-navbar.html.js~updateViewForSelectedSpeakers",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller-navbar.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "elem",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "totalInfo",
    "memberof": "rawjs/paging-controller-navbar.html.js",
    "longname": "rawjs/paging-controller-navbar.html.js~totalInfo",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller-navbar.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mergeSort",
    "memberof": "rawjs/paging-controller-navbar.html.js",
    "longname": "rawjs/paging-controller-navbar.html.js~mergeSort",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller-navbar.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "merge",
    "memberof": "rawjs/paging-controller-navbar.html.js",
    "longname": "rawjs/paging-controller-navbar.html.js~merge",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller-navbar.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "params": [
      {
        "name": "left",
        "types": [
          "*"
        ]
      },
      {
        "name": "right",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/paging-controller.html.js",
    "memberof": null,
    "longname": "rawjs/paging-controller.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    var on = 0;\n\n    Polymer({\n      is: 'paging-controller',\n      \n      properties: {\n        internalFadeTime: String,\n\n        speaker: {\n          type: Object\n        },\n\n        speakerId: {\n          type: Number\n        },\n\n        paging: {\n          type: String,\n          notify: true,\n          observer: '_setInternalPaging'\n        },\n\n        value: {\n          type: String\n        }\n      },\n\n      _setInternalPaging: function(paging) {\n        this.internalFadeTime = paging;\n        //console.log(\"_setInternalPaging\");\n      },\n      \n      _setPagingClicked: function() {\n        if(zoneFlag == 0) {\n          this.paging = this.internalFadeTime + \" \" + this.internalFadeLevel + \" \" + this.internalPagingVolume;\n          this.$.toast.show();\n          //console.log(\"_setPagingClicked\");\n        } else {\n          this.$.updatePagingValuesZone.body = {\n            \"zone\": speaker.zone.zoneID,\n            \"fadeTime\": this.internalFadeTime,\n            \"fadeLevel\": this.internalFadeLevel,\n            \"pagingVolume\": this.internalPagingVolume\n          };\n\n          this.$.updatePagingValuesZone.generateRequest();\n          //console.log(this.$.updatePagingValuesZone.body);\n          //console.log(\"hi\");\n        }\n      },\n\n      _sendPageClicked: function() {\n        //console.log(on);\n        if(on == 1) {\n          //console.log(\"on\");\n          on--;\n          Polymer.dom(sendPageButton).innerHTML = \"stop page\";\n        } else {\n          //console.log(\"off\");\n          on++;\n          Polymer.dom(sendPageButton).innerHTML = \"send page\";\n        }\n\n        this.$.pagingRequest.body = {\n            \"speaker\": this.speakerId\n        };\n        this.$.pagingRequest.generateRequest();\n\n        //console.log(\"Making a paging request \", this.speakerId, this.$.pagingRequest.body);\n        this.$.toasty.show();\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(data.response);\n      },\n\n      ready: function() {\n        this.internalFadeTime = this.paging;\n        //console.log(\"I am ready from paging \" + this.internalFadeTime);\n      }\n    });\n"
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "on",
    "memberof": "rawjs/paging-controller.html.js",
    "longname": "rawjs/paging-controller.html.js~on",
    "access": null,
    "export": false,
    "importPath": "./rawjs/paging-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/scheduling-controller-zone.html.js",
    "memberof": null,
    "longname": "rawjs/scheduling-controller-zone.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n\tvar timingDataArrayZone = [];\n\tvar schedulingModeZone;\n\tvar speakerForScheduling;\n\tvar ssZone;\n\n\tvar day = new Date().getDay();\n\n\tvar myChart_timingZone; \n\n\tvar canvas_timingZone = document.getElementById(\"timingChartZone\");\n\tvar chart_width_scalar_timing = .8;\n\tvar chart_height_scalar_timing = .52;\n\n\tfunction drawBasicZone() {\n\t\tssZone.schedulingSelectorZone.selected = \"basic\";\n\n\t\tvar localWidthZone = $(window).width() * .20;\n\t\tvar localHeightZone = $(window).height() * .5;\n\t\t\n\t\tdocument.getElementById(\"card-contentZone\").style.width = localWidthZone + \"px\";\n\t\tdocument.getElementById(\"card-contentZone\").style.height = localHeightZone + \"px\";\n\n\t\t//console.log(speaker);\n\n\n\t  loadDayOutsideZone();\n\t}\n\n\tfunction drawAdvancedZone() {\n\t\tcanvas_timingZone = document.getElementById(\"timingChartZone\");\n\t\t//console.log(canvas_timingZone);\n\t\tssZone.schedulingSelectorZone.selected = \"advanced\";\n\n\t  var localWidthZone = $(window).width() * .82;\n\t\tvar localHeightZone = ($(window).height() + 36) * .62;\n\n\t\tdocument.getElementById(\"card-contentZone\").style.width = localWidthZone + \"px\";\n\t\tdocument.getElementById(\"card-contentZone\").style.height = localHeightZone + \"px\";\n\n\t  canvas_timingZone = document.getElementById(\"timingChartZone\");\n\t  canvas_timingZone.width = $(window).width() * chart_width_scalar_timing;\n\t  canvas_timingZone.height = $(window).height() * chart_height_scalar_timing;\n\n\t  timingDataArrayZone = zones[0].Schedule[ssZone.dayListboxZone.selected].slice(4, 28);\n\n\t  $(document.getElementsByClassName(\"timesZone\")).each(function(i) {\n\t    this.value = timingDataArrayZone[i];\n\t  });\n\n\t  var timingData = {\n\t    labels: timingLabels,\n\t    datasets: [{\n\t      fillColor: \"rgba(63, 81, 181, 0.25)\",\n\t      strokeColor: \"#3f51b5\",\n\t      pointColor: \"#fff\",\n\t      pointStrokeColor: \"#3f51b5\",  \n\t      data: timingDataArrayZone\n\t    }]\n\t  };\n\n\t  //console.log(timingDataArrayZone);\n\n\n\t  loadDayOutsideZone();\n\t}\n\n\t$(window).resize(function() {\n\t\tif(schedulingModeZone.selected == \"advanced\") {\n\t    redrawTimingOnInputZone()\n\t \t}\n\n\t});\n\n\tvar timingLabels = [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\", \"24:00\"];\n\n\tvar timingData = {\n\t  labels: timingLabels,\n\t  datasets: [{\n\t    fillColor: \"rgba(63, 81, 181, 0.25)\",\n\t    strokeColor: \"#3f51b5\",\n\t    pointColor: \"#fff\",\n\t    pointStrokeColor: \"#3f51b5\",  \n\t    data: timingDataArrayZone\n\t  }]\n\t};\n\n\tvar timingLineAttributes = {\n\t  scaleOverride: true,\n\t  scaleSteps: 10,   \n\t\tscaleLabel: \"<%= value + \\\"%\\\" %>\",\n\t  scaleStartValue: 0,\n\t  scaleStepWidth: 10,\n\t  scaleShowLabels: true,\n\t  scaleFontSize: 12,\n\t};\n\n\n\tvar timingResizeLineAttributes = {\n\t  animation: false,\n\t  scaleOverride: true,\n\t  scaleSteps: 10,\n\t\tscaleLabel: \"<%= value + \\\"%\\\" %>\",\n\t  scaleStartValue: 0,\n\t  scaleStepWidth: 10,\n\t  scaleShowLabels: true,\n\t  scaleFontSize: 12,\n\t};\n\n\tvar timingRedrawLineAttributes = {\n\t  showTooltips: true,\n\t  scaleOverride: true,\n\t  scaleSteps: 10,\n\t\tscaleLabel: \"<%= value + \\\"%\\\" %>\",\n\t  scaleStartValue: 0,\n\t  scaleStepWidth: 10,\n\t  scaleShowLabels: true,\n\t  scaleFontSize: 12,\n\t};\n\n\tPolymer({\n\t    is: 'scheduling-controller-zone',\n\n\t    behaviors: [\n\t      Polymer.NeonAnimatableBehavior\n\t    ],\n\n\t    properties: {\n\n\t      speaker: {\n\t        type: Object\n\t      },\n\n\t    \tanimationConfig: {\n\t        value: function() {\n\t          return {\n\t            'entry': {\n\t                name: 'fade-in-animation',\n\t                node: this\n\t              },\n\t            'exit': {\n\t              name: 'slide-left-animation',\n\t              node: this\n\t            }\n\t          }\n\t        }\n\t      }\n\t    },\n\n\t    loadDayZone: loadDayOutsideZone,\n\n\t    scheduleTimeZone: function() {\n\n\t    \t//console.log(this.$.intervalListboxZone.selected);\n\n\t      var scheduleTimeAjaxZone = document.querySelector(\"#scheduleTimeAjaxZone\");\n\n\t      if(schedulingModeZone.selected == \"advanced\") {\n\t\t\t    var timesZone = document.getElementsByClassName(\"timesZone\");\n\t\t\t\t\tvar timesArrayZone = [];\n\t\t\t\t\tfor (var i = 0; i < timesZone.length; i++) {\n\t\t\t\t\t\tvar timesParse = parseInt(times[i].value);\n\n\t\t\t\t\t\tif(isNaN(timesParse)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimesArrayZone.push(timesParse);\n\t\t\t\t\t}\n\n\t\t\t\t\tscheduleTimeAjaxZone.body = {\n\t\t\t\t\t\t\"zone\" \t\t\t: speaker.zone.zoneID,\n\t\t\t\t\t\t\"mode\"\t\t\t: 1,\n\t\t\t\t\t\t\"start\"\t\t\t: -1,\n\t\t\t\t\t\t\"end\"\t\t\t\t: -1,\n\t\t\t\t\t\t\"day\" \t\t\t: parseInt(this.$.dayListboxZone.selected),\n\t\t\t\t\t\t\"interval\"\t: 60,\n\t\t\t\t\t\t\"times\" \t\t:\ttimesArrayZone\n\t\t\t\t\t};\n\n\t\t\t\t\tscheduleTimeAjaxZone.generateRequest();\n\t      } else if(schedulingModeZone.selected == \"basic\") {\n\t      \tvar upTime = this.$.upTimeListBoxZone.selected;\n\t      \tvar downTime = this.$.downTimeListBoxZone.selected;\n\t      \t//console.log(\"this is the interval\", this.$.interval);\n\n\t      \tvar timesArrayZone = [];\n\t      \trampUpLevel = this.$.rampUpLevelListboxZone.selected\n\t      \trampDownLevel = this.$.rampDownLevelListboxZone.selected\n\t      \tvar i = 0;\n\t      \tfor(i = 0; i < upTime; i++) {\n\t      \t\ttimesArrayZone.push(rampDownLevel * 10);\n\t      \t}\t\n\t      \tfor(i; i < downTime; i++) {\n\t      \t\ttimesArrayZone.push(rampUpLevel * 10);\n\t      \t}\n\t      \tfor(i; i < 24; i++) {\n\t      \t\ttimesArrayZone.push(rampDownLevel * 10);\n\t      \t}\n\n\t\t\t\t\tscheduleTimeAjaxZone.body = {\n\t\t\t\t\t\t\"zone\" \t\t\t: speaker.zone.zoneID, \n\t\t\t\t\t\t\"mode\"\t\t\t: 0,\n\t\t\t\t\t\t\"start\"\t\t\t: parseInt(this.$.upTimeListBoxZone.selected),\n\t\t\t\t\t\t\"end\"\t\t\t\t: parseInt(this.$.downTimeListBoxZone.selected),\n\t\t\t\t\t\t\"day\" \t\t\t: parseInt(this.$.dayListboxZone.selected),\n\t\t\t\t\t\t\"interval\"\t: parseInt(this.$.intervalListboxZone.selected),\n\t\t\t\t\t\t\"times\" \t\t:\ttimesArrayZone\n\t\t\t\t\t};\n\n\t\t\t\t\tscheduleTimeAjaxZone.generateRequest();\n\n\t      \t//console.log(timesArrayZone);\n\t      }\n\t\t  },\n\n\t  \tredrawTimingOnInputZone: redrawTimingOnInputZone,\n\n\t  \t_logResponse: function(event, data) {\n\t  \t\t//console.log(data.response);\n\t  \t},\n\n\t    ready: function() {\n\t    \t//console.log(\"THIS IS THE DAY\", day);\n\t    \tthis.$.dayListboxZone.selected = day;\n\t    \t//console.log(this.$.dayListboxZone.selected);\n\t    \tschedulingModeZone = this.$.schedulingSelectorZone; \n\t    \t//console.log(\"i have read the selected value\", schedulingModeZone); \t\n\t    \t//console.log(schedulingModeZone);\n\t    \t//console.log(\"im the ready selected  \", this.$);\n\n\t\t\t\t//console.log(this.zone);\n\t\t\t\tssZone = this.$;\n\n\t    }\n\n\t  });\n\n\tfunction loadDayOutsideZone() {\n\t\t//console.log(ss);\n\n\t\tvar selectedDay = ssZone.dayListboxZone.selected;\n\t\t//console.log(\"day\" + selectedDay);\n\t\t//console.log(ssZone.schedulingSelectorZone.selected);\n\t\tif(ssZone.schedulingSelectorZone.selected == \"basic\") {\n\t\t\tif(zones[speaker.zone.zoneID - 1].Schedule[selectedDay][2] != -1 || zones[speaker.zone.zoneID - 1].Schedule[selectedDay][3] != -1) {\n\t\t\t\tssZone.upTimeListBoxZone.selected = zones[speaker.zone.zoneID - 1].Schedule[selectedDay][2];\n\t\t\t\tssZone.downTimeListBoxZone.selected = zones[speaker.zone.zoneID - 1].Schedule[selectedDay][3];\n\n\t\t\t\tssZone.rampUpLevelListboxZone.selected = zones[speaker.zone.zoneID - 1].Schedule[selectedDay][zones[speaker.zone.zoneID - 1].Schedule[selectedDay][2] + 4] / 10;\n\t\t\t\tssZone.rampDownLevelListboxZone.selected = zones[speaker.zone.zoneID - 1].Schedule[selectedDay][zones[speaker.zone.zoneID - 1].Schedule[selectedDay][3] + 4] / 10;\n\t\t\t\tssZone.intervalListboxZone.selected = zones[speaker.zone.zoneID - 1].Schedule[selectedDay][1];\n\t\t\t} else {\n\t\t\t\tssZone.upTimeListBoxZone.selected = -1;\n\t\t\t\tssZone.downTimeListBoxZone.selected = -1;\n\t\t\t\tssZone.rampUpLevelListboxZone.selected = -1;\n\t\t\t\tssZone.rampDownLevelListboxZone.selected = -1;\n\t\t\t\tssZone.intervalListboxZone.selected = -1;\n\t\t\t}\n\t\t} else if(ssZone.schedulingSelectorZone.selected == \"advanced\") {\n\t\t\ttimingDataArrayZone = zones[speaker.zone.zoneID - 1].Schedule[selectedDay].slice(4, 29);\n\t\t\tvar times = document.getElementsByClassName(\"timesZone\");\n\n\t\t\tfor(var x = 0; x < timingDataArrayZone.length; x++) {\n\t\t\t\ttimes[x].value = timingDataArrayZone[x];\n\t\t\t\ttimes[x + 1].value = timingDataArrayZone[0];\n\t\t\t}\n\t\t\tredrawTimingOnInputZone()\n\n\t\t\t//console.log(timingDataArrayZone);\n\t\t} else {\n\t\t\talert(\"i hava make a break\");\n\t\t}\n\t}\n\n\n\tfunction redrawTimingZone(drawingData, drawingLineAttributes) {\n\t\t//console.log(\"I got here\");\n\t\t$($(canvas_timingZone).parent()).prepend(\"<canvas id=\\\"timingChartZone\\\" style=\\\"margin-left: calc(.02 * 100vh); margin-right: calc(.02 * 100vh); margin-top: calc(.02 * 100vh);\\\" class=\\\"chartClass\\\"></canvas>\");\n\n\t\t//console.log(\"now im here\");\n\n\t  canvas_timingZone.remove();\t\t\n\n\t  var localWidthZone = $(window).width() * .82;\n\t\tvar localHeightZone = ($(window).height() + 36) * .62;\n\n\t\tdocument.getElementById(\"card-contentZone\").style.width = localWidthZone + \"px\";\n\t\tdocument.getElementById(\"card-contentZone\").style.height = localHeightZone + \"px\";\n\n\t  canvas_timingZone = document.getElementById(\"timingChartZone\");\n\t  canvas_timingZone.width = $(window).width() * chart_width_scalar_timing;\n\t  canvas_timingZone.height = $(window).height() * chart_height_scalar_timing;\n\n\t  //console.log(\"i think im here\");\n\n\t  //console.log(timingDataArrayZone);\n\n\t  myChart_timingZone = new Chart(canvas_timingZone.getContext(\"2d\")).Line(drawingData, drawingLineAttributes);\n\n\t  //console.log(\"and now im here...\");\n\t}\n\n\tfunction redrawTimingOnInputZone() {\n\t  var errorAdjustToastZone = document.getElementById(\"errorAdjustToastZone\");\n\t  var strokeColor = \"#3f51b5\";\n\t  var pointStrokeColor = \"#3f51b5\";\n\t  var fillColor = \"rgba(63, 81, 181, .25)\";\n\n\t  //console.log(\"redrawTimingOnInputZone\");\n\n\t  $(document.getElementsByClassName(\"timesZone\")).each(function(i) {\n\t  \t//console.log(i, this.value);\n\n\t    if(this.value > -1 && this.value < 101 && this.value !== \"\") {\n\t    \t//console.log(\"in the bigger One\");\n\t      timingDataArrayZone[i] = parseInt(this.value);\n\t    } else {\n\t    \t//console.log(\"not in the bigger one\");\n\t      timingDataArrayZone[i] = null;\n\t      \n\t      // Set the error colors\n\t      strokeColor = \"#F33F31\";\n\t      pointStrokeColor = \"#F33F31\";\n\t      fillColor = \"rgba(243, 63, 49, .25)\";\n\n\t      if(isNaN(this.value)) {\n\t        errorAdjustToastZone.text = \"Invalid entry for \" + timingLabels[i] + \"Hz: Only numerical values are accepted\";\n\t        errorAdjustToastZone.show();\n\t      } else if (this.value === \"\") {\n\n\t      } else {\n\t        errorAdjustToastZone.text = \"Invalid entry for \" + timingLabels[i] + \"Hz: Accepted range of values is -20 to 80\";\n\t        errorAdjustToastZone.show();\n\t      }\n\t    }\n\t  });\n\n\t  var timingRedrawData = {\n\t    labels: timingLabels,\n\t    datasets: [{\n\t      fillColor: fillColor,\n\t      strokeColor: strokeColor,\n\t      pointColor: \"#fff\",\n\t      pointStrokeColor: pointStrokeColor,  \n\t      data: timingDataArrayZone,\n\t      }]\n\t  };\n\n\t  redrawTimingZone(timingRedrawData, timingRedrawLineAttributes);\n\t}\n\n"
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingDataArrayZone",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~timingDataArrayZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "day",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~day",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "canvas_timingZone",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~canvas_timingZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "chart_width_scalar_timing",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~chart_width_scalar_timing",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "chart_height_scalar_timing",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~chart_height_scalar_timing",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawBasicZone",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~drawBasicZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawAdvancedZone",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~drawAdvancedZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingLabels",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~timingLabels",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingData",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~timingData",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingLineAttributes",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~timingLineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingResizeLineAttributes",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~timingResizeLineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingRedrawLineAttributes",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~timingRedrawLineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "loadDayOutsideZone",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~loadDayOutsideZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "redrawTimingZone",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~redrawTimingZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "params": [
      {
        "name": "drawingData",
        "types": [
          "*"
        ]
      },
      {
        "name": "drawingLineAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "redrawTimingOnInputZone",
    "memberof": "rawjs/scheduling-controller-zone.html.js",
    "longname": "rawjs/scheduling-controller-zone.html.js~redrawTimingOnInputZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/scheduling-controller.html.js",
    "memberof": null,
    "longname": "rawjs/scheduling-controller.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\nvar timingDataArray = [];\nvar defaultWidth = 0;\nvar defaultHeight = 0;\n\n\tvar schedulingMode;\n\tvar speakerForScheduling;\n\tvar ss;\n\n  var day = new Date().getDay();\n\n  var myChart_timing; \n\n  var canvas_timing = document.getElementById(\"timingChart\");\n  var chart_width_scalar_timing = .8;\n  var chart_height_scalar_timing = .52;\n \t\n\n \tfunction saveDefault() {\n \t\tif(defaultWidth == 0) {\n \t\t\tdefaultWidth = document.getElementById(\"card-content\").offsetWidth;\n \t\t}\n \t\tif(defaultHeight == 0) {\n \t\t\tdefaultHeight = document.getElementById(\"card-content\").offsetHeight;\n \t\t}\n \t}\n\n  function drawBasic() {\n  \tss.schedulingSelector.selected = \"basic\";\n\n  \tvar localWidth = $(window).width() * .20;\n  \tvar localHeight = $(window).height() * .5;\n  \t\n  \tdocument.getElementById(\"card-content\").style.width = localWidth + \"px\";\n  \tdocument.getElementById(\"card-content\").style.height = localHeight + \"px\";\n  \t//console.log(speaker);\n\n    loadDayOutside();\n\t}\n\n  function drawAdvanced() {\n  \tss.schedulingSelector.selected = \"advanced\";\n\n    var localWidth = $(window).width() * .82;\n  \tvar localHeight = ($(window).height() + 36) * .62;\n\n  \tdocument.getElementById(\"card-content\").style.width = localWidth + \"px\";\n  \tdocument.getElementById(\"card-content\").style.height = localHeight + \"px\";\n\n    canvas_timing = document.getElementById(\"timingChart\");\n    canvas_timing.width = $(window).width() * chart_width_scalar_timing;\n    canvas_timing.height = $(window).height() * chart_height_scalar_timing;\n\n    timingDataArray = speaker.Schedule[ss.dayListbox.selected].slice(4, 28);\n\n    $(document.getElementsByClassName(\"times\")).each(function(i) {\n      this.value = timingDataArray[i];\n    });\n\n    var timingData = {\n\t    labels: timingLabels,\n\t    datasets: [{\n\t      fillColor: \"rgba(63, 81, 181, 0.25)\",\n\t      strokeColor: \"#3f51b5\",\n\t      pointColor: \"#fff\",\n\t      pointStrokeColor: \"#3f51b5\",  \n\t      data: timingDataArray\n\t    }]\n\t  };\n\n    //console.log(timingDataArray);\n\n    loadDayOutside();\n\t}\n\n  $(window).resize(function() {\n  \tif(schedulingMode.selected == \"advanced\") {\n      redrawTimingOnInput();\n   \t}\n   \tadjustSize();\n\n  });\n\n  function adjustSize() {\t\n  \tvar localWidth = $(window).width() * .2;\n  \tvar localHeight = $(window).height() * .5;\n\n  \tif(ss.schedulingSelector.selected == \"basic\") {  \n  \t\tdocument.getElementById(\"card-content\").style.height = localHeight + \"px\";\n  \t\tsaveDefault();\n\t   \tvar basic_container = document.getElementById(\"basic_container\");\n\t   \tvar card = document.getElementById(\"card\");\n\t   \tbasic_container.style.marginLeft = (Math.abs(card.offsetWidth - basic_container.offsetWidth) / 2) - 28 + \"px\";\n  \t}\n  }\n\n  var timingLabels = [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\", \"24:00\"];\n\n  var timingData = {\n    labels: timingLabels,\n    datasets: [{\n      fillColor: \"rgba(63, 81, 181, 0.25)\",\n      strokeColor: \"#3f51b5\",\n      pointColor: \"#fff\",\n      pointStrokeColor: \"#3f51b5\",  \n      data: timingDataArray\n    }]\n  };\n\n  var timingLineAttributes = {\n    scaleOverride: true,\n    scaleSteps: 10,   \n  \tscaleLabel: \"<%= value + \\\"%\\\" %>\",\n    scaleStartValue: 0,\n    scaleStepWidth: 10,\n    scaleShowLabels: true,\n    scaleFontSize: 12,\n  };\n\n\n  var timingResizeLineAttributes = {\n    animation: false,\n    scaleOverride: true,\n    scaleSteps: 10,\n  \tscaleLabel: \"<%= value + \\\"%\\\" %>\",\n    scaleStartValue: 0,\n    scaleStepWidth: 10,\n    scaleShowLabels: true,\n    scaleFontSize: 12,\n  };\n\n  var timingRedrawLineAttributes = {\n    showTooltips: true,\n    scaleOverride: true,\n    scaleSteps: 10,\n  \tscaleLabel: \"<%= value + \\\"%\\\" %>\",\n    scaleStartValue: 0,\n    scaleStepWidth: 10,\n    scaleShowLabels: true,\n    scaleFontSize: 12,\n  };\n\t\n Polymer({\n      is: 'scheduling-controller',\n\n      behaviors: [\n        Polymer.NeonAnimatableBehavior\n      ],\n\n      properties: {\n\n        speaker: {\n          type: Object\n        },\n\n      \tanimationConfig: {\n          value: function() {\n            return {\n              'entry': {\n                  name: 'fade-in-animation',\n                  node: this\n                },\n              'exit': {\n                name: 'slide-left-animation',\n                node: this\n              }\n            }\n          }\n        }\n      },\n\n      loadDay: loadDayOutside,\n\n      scheduleTime: function() {\n\n      \t//console.log(this.$.intervalListbox.selected);\n\n\t      var scheduleTimeAjax = document.querySelector(\"#scheduleTimeAjax\");\n\n\t      if(schedulingMode.selected == \"advanced\") {\n\t\t\t    var times = document.getElementsByClassName(\"times\");\n\t\t\t\t\tvar timesArray = [];\n\t\t\t\t\tfor (var i = 0; i < times.length; i++) {\n\t\t\t\t\t\tvar timesParse = parseInt(times[i].value);\n\n\t\t\t\t\t\tif(isNaN(timesParse)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimesArray.push(timesParse);\n\t\t\t\t\t}\n\n\t\t\t\t\tscheduleTimeAjax.body = {\n\t\t\t\t\t\t\"speaker\" \t: speakerid,\n\t\t\t\t\t\t\"mode\"\t\t\t: 1,\n\t\t\t\t\t\t\"start\"\t\t\t: -1,\n\t\t\t\t\t\t\"end\"\t\t\t\t: -1,\n\t\t\t\t\t\t\"day\" \t\t\t: parseInt(this.$.dayListbox.selected),\n\t\t\t\t\t\t\"interval\"\t: 60,\n\t\t\t\t\t\t\"times\" \t\t:\ttimesArray\n\t\t\t\t\t};\n\n\t\t\t\t\tscheduleTimeAjax.generateRequest();\n\t      } else if(schedulingMode.selected == \"basic\") {\n\t      \tvar upTime = this.$.upTimeListBox.selected;\n\t      \tvar downTime = this.$.downTimeListBox.selected;\n\n\t      \t//console.log(\"this is the interval\", this.$.interval);\n\n\t      \tvar timesArray = [];\n\t      \trampUpLevel = this.$.rampUpLevelListbox.selected\n\t      \trampDownLevel = this.$.rampDownLevelListbox.selected\n\t      \tvar i = 0;\n\t      \tfor(i = 0; i < upTime; i++) {\n\t      \t\ttimesArray.push(rampDownLevel * 10);\n\t      \t}\t\n\t      \tfor(i; i < downTime; i++) {\n\t      \t\ttimesArray.push(rampUpLevel * 10);\n\t      \t}\n\t      \tfor(i; i < 24; i++) {\n\t      \t\ttimesArray.push(rampDownLevel * 10);\n\t      \t}\n\n\t\t\t\t\tscheduleTimeAjax.body = {\n\t\t\t\t\t\t\"speaker\" \t: speakerid, \n\t\t\t\t\t\t\"mode\"\t\t\t: 0,\n\t\t\t\t\t\t\"start\"\t\t\t: parseInt(this.$.upTimeListBox.selected),\n\t\t\t\t\t\t\"end\"\t\t\t\t: parseInt(this.$.downTimeListBox.selected),\n\t\t\t\t\t\t\"day\" \t\t\t: parseInt(this.$.dayListbox.selected),\n\t\t\t\t\t\t\"interval\"\t: parseInt(this.$.intervalListbox.selected),\n\t\t\t\t\t\t\"times\" \t\t:\ttimesArray\n\t\t\t\t\t};\n\n\t\t\t\t\tscheduleTimeAjax.generateRequest();\n\n\t      \t//console.log(timesArray);\n\t      \tthis.$.scheduleTimeAjax.body = {\n\n\t      \t};\n\t      }\n\t\t  },\n\n    \tredrawTimingOnInput: redrawTimingOnInput,\n\n    \t_logResponse: function(event, data) {\n    \t\t//console.log(data.response);\n    \t},\n\n      ready: function() {\n      \t//console.log(\"THIS IS THE DAY\", day);\n      \tthis.$.dayListbox.selected = day;\n      \t//console.log(this.$.dayListbox.selected);\n      \tschedulingMode = this.$.schedulingSelector; \n      \t//console.log(\"i have read the selected value\", schedulingMode); \t\n      \t//console.log(schedulingMode);\n      \t//console.log(\"im the ready selected  \", this.$);\n\n  \t\t\t//console.log(this.speaker);\n  \t\t\tss = this.$;\n\n      }\n\n    });\n\n\tfunction loadDayOutside() {\n\t\t//console.log(ss);\n\n\t\tvar selectedDay = ss.dayListbox.selected;\n\t\t//console.log(\"day\" + selectedDay);\n\t\t//console.log(speaker);\n\t\t//console.log(ss.schedulingSelector.selected);\n\t\tif(ss.schedulingSelector.selected == \"basic\") {\n\t\t\tif(speaker.Schedule[selectedDay][2] != -1 || speaker.Schedule[selectedDay][3] != -1) {\n\t\t\t\tss.upTimeListBox.selected = speaker.Schedule[selectedDay][2];\n\t\t\t\tss.downTimeListBox.selected = speaker.Schedule[selectedDay][3];\n\n\t\t\t\tss.rampUpLevelListbox.selected = speaker.Schedule[selectedDay][speaker.Schedule[selectedDay][2] + 4] / 10;\n\t\t\t\tss.rampDownLevelListbox.selected = speaker.Schedule[selectedDay][speaker.Schedule[selectedDay][3] + 4] / 10;\n\t\t\t\tss.intervalListbox.selected = speaker.Schedule[selectedDay][1];\n\t\t\t} else {\n\t\t\t\tss.upTimeListBox.selected = -1;\n\t\t\t\tss.downTimeListBox.selected = -1;\n\t\t\t\tss.rampUpLevelListbox.selected = -1;\n\t\t\t\tss.rampDownLevelListbox.selected = -1;\n\t\t\t\tss.intervalListbox.selected = -1;\n\t\t\t}\n\t\t} else if(ss.schedulingSelector.selected == \"advanced\") {\n\t\t\ttimingDataArray = speaker.Schedule[selectedDay].slice(4, 29);\n\t\t\tvar times = document.getElementsByClassName(\"times\");\n\n\t\t\tfor(var x = 0; x < timingDataArray.length; x++) {\n\t\t\t\ttimes[x].value = timingDataArray[x];\n\t\t\t\ttimes[x + 1].value = timingDataArray[0];\n\t\t\t}\n\t\t\tredrawTimingOnInput()\n\n\t\t\t//console.log(timingDataArray);\n\t\t} else {\n\t\t\talert(\"i hava make a break\");\n\t\t}\n\t}\n\n\n  function redrawTiming(drawingData, drawingLineAttributes) {\n  \t//console.log(\"I got here\");\n\t\t$($(canvas_timing).parent()).prepend(\"<canvas id=\\\"timingChart\\\" style=\\\"margin-left: calc(.02 * 100vh); margin-right: calc(.02 * 100vh); margin-top: calc(.02 * 100vh);\\\" class=\\\"chartClass\\\"></canvas>\");\n\n\t\t//console.log(\"now im here\");\n\n    canvas_timing.remove();\t\t\n\n    var localWidth = $(window).width() * .82;\n  \tvar localHeight = ($(window).height() + 36) * .62;\n\n  \tdocument.getElementById(\"card-content\").style.width = localWidth + \"px\";\n  \tdocument.getElementById(\"card-content\").style.height = localHeight + \"px\";\n\n    canvas_timing = document.getElementById(\"timingChart\");\n    canvas_timing.width = $(window).width() * chart_width_scalar_timing;\n    canvas_timing.height = $(window).height() * chart_height_scalar_timing;\n\n    //console.log(\"i think im here\");\n\n    //console.log(timingDataArray);\n\n    myChart_timing = new Chart(canvas_timing.getContext(\"2d\")).Line(drawingData, drawingLineAttributes);\n\n    //console.log(\"and now im here...\");\n  }\n\n  function redrawTimingOnInput() {\n    var errorAdjustToast = document.getElementById(\"errorAdjustToast\");\n    var strokeColor = \"#3f51b5\";\n    var pointStrokeColor = \"#3f51b5\";\n    var fillColor = \"rgba(63, 81, 181, .25)\";\n\n    //console.log(\"redrawTimingOnInput\");\n\n    $(document.getElementsByClassName(\"times\")).each(function(i) {\n    \t//console.log(i);\n      if(this.value > -1 && this.value < 101 && this.value !== \"\") {\n        timingDataArray[i] = parseInt(this.value);\n      } else {\n        timingDataArray[i] = null;\n        \n        // Set the error colors\n        strokeColor = \"#F33F31\";\n        pointStrokeColor = \"#F33F31\";\n        fillColor = \"rgba(243, 63, 49, .25)\";\n\n        if(isNaN(this.value)) {\n          errorAdjustToast.text = \"Invalid entry for \" + timingLabels[i] + \"Hz: Only numerical values are accepted\";\n          errorAdjustToast.show();\n        } else if (this.value === \"\") {\n\n        } else {\n          errorAdjustToast.text = \"Invalid entry for \" + timingLabels[i] + \"Hz: Accepted range of values is -20 to 80\";\n          errorAdjustToast.show();\n        }\n      }\n    });\n\n    var timingRedrawData = {\n      labels: timingLabels,\n      datasets: [{\n        fillColor: fillColor,\n        strokeColor: strokeColor,\n        pointColor: \"#fff\",\n        pointStrokeColor: pointStrokeColor,  \n        data: timingDataArray,\n        }]\n    };\n\n    redrawTiming(timingRedrawData, timingRedrawLineAttributes);\n  }\n\n"
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingDataArray",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~timingDataArray",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultWidth",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~defaultWidth",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultHeight",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~defaultHeight",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "day",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~day",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "canvas_timing",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~canvas_timing",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "chart_width_scalar_timing",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~chart_width_scalar_timing",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "chart_height_scalar_timing",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~chart_height_scalar_timing",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "saveDefault",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~saveDefault",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawBasic",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~drawBasic",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawAdvanced",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~drawAdvanced",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "adjustSize",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~adjustSize",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingLabels",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~timingLabels",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingData",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~timingData",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingLineAttributes",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~timingLineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingResizeLineAttributes",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~timingResizeLineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timingRedrawLineAttributes",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~timingRedrawLineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "loadDayOutside",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~loadDayOutside",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "redrawTiming",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~redrawTiming",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "params": [
      {
        "name": "drawingData",
        "types": [
          "*"
        ]
      },
      {
        "name": "drawingLineAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "redrawTimingOnInput",
    "memberof": "rawjs/scheduling-controller.html.js",
    "longname": "rawjs/scheduling-controller.html.js~redrawTimingOnInput",
    "access": null,
    "export": false,
    "importPath": "./rawjs/scheduling-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/simple-fit.html.js",
    "memberof": null,
    "longname": "rawjs/simple-fit.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "  Polymer({\n    is: 'simple-fit',\n    behaviors: [\n      Polymer.IronFitBehavior\n    ]\n  });\n"
  },
  {
    "__docId__": 106,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/speaker-controller.html.js",
    "memberof": null,
    "longname": "rawjs/speaker-controller.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n    var speakerid = 0;\n\n    Polymer({\n      is: 'speaker-controller',\n\n      behaviors: [\n        Polymer.NeonAnimatableBehavior\n      ],\n\n      properties: {\n        speaker: {\n          type: Object,\n          observer: \"_speakerUpdated\"\n        },\n\n        isReady: {\n          type: Boolean,\n          value: false\n        },\n\n        mode: {\n          type: String,\n          value: \"volume\"\n        },\n\n        speakerId: {\n          type: Number,\n          value: 0\n        },\n\n        volumeLevel: {    // this shit and all the other shitters were volumeone for some reason ??? changed to volumeLevel\n          type: String,\n          value: \"0\",\n          observer: '_volumeUpdate'\n        },\n        \n        musicLevel: {\n          type: Number,\n          value: 0\n        },\n\n        pagingLevel: {\n          type: String,\n          value: \"0\",\n          observer: '_pagingUpdate'\n        },\n\n        equalizerone: {\n          type: String,\n          value: \"0\",\n          observer: '_equalizerUpdate'\n        },\n\n        musicone: {\n          type: String,\n          value: \"0\",\n          observer: '_equalizerUpdate'\n        },\n\n        target: {\n          type: String,\n          value: \"0\",\n          observer: '_targetUpdate'\n        },\n\n        animationConfig: {\n          value: function() {\n            return {\n              'entry': {\n                  name: 'fade-in-animation',\n                  node: this\n                },\n              'exit': {\n                name: 'slide-left-animation',\n                node: this\n              }\n            }\n          }\n        }\n      },\n\n      adjustSize: function() {\n        adjustSize();\n      },\n\n      _volumeUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"volume\"];\n          var attributeValues = {\n            \"volume\": this.volumeLevel,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          //console.log(this.$, this, \"this is the stuff yo\")\n          this.$.speakerUpdateAjax.generateRequest();\n        }\n        //console.log(\"_volumeUpdate \" + this.volumeLevel);\n      },\n\n      _pagingUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"paging\"];\n          var attributeValues = {\n            \"paging\": this.pagingLevel,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n        }\n        //console.log(\"_pagingUpdate \" + this.pagingLevel);\n      },\n\n      _equalizerUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"equalizer\"];\n          var attributeValues = {\n            \"equalizer\": this.equalizerone,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n\n          //console.log(this.$.speakerUpdateAjax.body);\n\n        }\n      },\n\n      _musicEqualizerUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"music\"];\n          var attributeValues = {\n            \"music\": this.musicone,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n\n          //console.log(this.$.speakerUpdateAjax.body);\n\n        }\n      },\n\n      _targetUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"target\"];\n          var attributeValues = {\n            \"target\": this.target,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n        }\n      },\n\n      _targetUpdateZone: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"target\"];\n          var attributeValues = {\n            \"target\": this.target,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n        }\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(data.response);\n      },\n\n      _initializeStatus: function(speaker) {\n        this.speakerId = speaker.id;\n        speakerid = speaker.id;\n        this.volume = speaker.VolumeLevel[0];\n        this.equalizer = speaker.equalizerone;\n      },\n\n      _speakerUpdated: function() {\n        this.isReady = false;\n        this._initializeStatus(this.speaker);\n        this.isReady = true;\n      },\n\n      ready: function() {\n        //console.log(document.getElementById('target'));\n        if(this.speaker !== undefined)\n          this._initializeStatus(this.speaker);\n        this.isReady = true;\n        //console.log(\"this is the zone flag\", zoneFlag);\n      }\n    });\n  \n  (function hideSomething() {\n    \n  })();\n\n"
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "speakerid",
    "memberof": "rawjs/speaker-controller.html.js",
    "longname": "rawjs/speaker-controller.html.js~speakerid",
    "access": null,
    "export": false,
    "importPath": "./rawjs/speaker-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/speaker-icon.html.js",
    "memberof": null,
    "longname": "rawjs/speaker-icon.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    var colors = [\n      '--paper-brown-500',\n      '--paper-deep-orange-500',\n      '--paper-orange-500',\n      '--paper-amber-500',\n      '--paper-lime-500',\n      '--paper-light-green-500',\n      '--paper-green-500',\n      '--paper-teal-500',\n      '--paper-cyan-500',\n      '--paper-light-blue-500',\n      '--paper-blue-500',\n      '--paper-indigo-500',\n      '--paper-deep-purple-500',\n      '--paper-purple-500',\n      '--paper-pink-500',\n      '--paper-red-500'\n    ];\n\n    Polymer({\n      is: 'speaker-icon',\n\n      properties: {\n        x: Number,\n        y: Number,\n        speakerId: Number\n      },\n\n      ready: function () {\n          this.$.icon.style.left = this.x.toString() + \"px\";\n          this.$.icon.style.top = this.y.toString() + \"px\";\n          var color = colors[Math.floor(Math.random()*colors.length)];\n          this.customStyle['--speaker-background-color'] = 'var(' + color + ')';\n          this.updateStyles();\n      }\n    });\n"
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "colors",
    "memberof": "rawjs/speaker-icon.html.js",
    "longname": "rawjs/speaker-icon.html.js~colors",
    "access": null,
    "export": false,
    "importPath": "./rawjs/speaker-icon.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/speaker-tooltip.html.js",
    "memberof": null,
    "longname": "rawjs/speaker-tooltip.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n    Polymer({\n      is: 'speaker-tooltip',\n\n      attributes: {\n        speaker: Object\n      },\n\n      _selectSpeaker: function() {\n        zoneFlag = 0;\n        this.fire('speakerselected', {speaker: this.speaker});\n        //console.log(this.speaker)\n      },\n\n      _selectZone: function() {\n        zoneFlag = 1;\n        this.fire('zoneselected', {zone: this.speaker.zone});\n      },\n\n      _selectAllZone: function() {\n        zoneFlag = -1;\n        this.fire('zoneselected', {zone: 1})\n      }\n    });\n\n    $(document).ready(function() {\n      if(parseInt(localStorage.getItem(\"level\")) == 0) {\n          document.getElementById(\"zoneSelectionButton\").innerHTML = \"\";\n          document.getElementById(\"allZoneSelectionButton\").innerHTML = \"\";\n      }\n  });\n"
  },
  {
    "__docId__": 111,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/target-selector-zone.html.js",
    "memberof": null,
    "longname": "rawjs/target-selector-zone.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    window.addEventListener('WebComponentsReady', function(e) {\n      //console.log(\"WebComponentsReady\");\n      //console.log();\n    });\n\n    //console.log(document.getElementById(\"targetZone\"));\n\n    var dataArrayZone = [];\n    //console.log(dataArrayZone);\n\n    var labelsZone = [\"80\", \"100\", \"125\", \"160\", \"200\", \"250\", \"315\", \"400\", \"500\", \"630\", \"800\", \"1k\", \"1.25k\", \"1.6k\", \"2k\", \"2.5k\", \"3.15k\", \"4k\", \"5k\", \"6.3k\", \"8k\"];\n\n\n    var dataZone = {\n      labels: labelsZone,\n      datasets: [{\n        fillColor: \"rgba(63, 81, 181, 0.25)\",\n        strokeColor: \"#3f51b5\",\n        pointColor: \"#fff\",\n        pointStrokeColor: \"#3f51b5\",  \n        data: dataArrayZone,\n      }]\n    };\n\n    var lineAttributesZone = {\n      scaleOverride: true,\n      scaleSteps: 10,\n      scaleStartValue: -20,\n      scaleStepWidth: 10,\n      scaleShowLabels: true,\n      scaleFontSize: 12,\n    };\n\n    var resizeLineAttributesZone = {\n      animation: false,\n      scaleOverride: true,\n      scaleSteps: 10,\n      scaleStartValue: -20,\n      scaleStepWidth: 10,\n      scaleShowLabels: true,\n      scaleFontSize: 12,\n    };\n\n    var redrawLineAttributesZone = {\n      showTooltips: true,\n      scaleOverride: true,\n      scaleSteps: 10,\n      scaleStartValue: -20,\n      scaleStepWidth: 10,\n      scaleShowLabels: true,\n      scaleFontSize: 12,\n    };\n\n    Polymer({\n      is: 'target-selector-zone',\n      \n      properties: {\n        internalTargetZone: String,\n\n        targetZone: {\n          type: String,\n          notify: true,\n          observer: '_setInternalTargetZone'\n        },\n\n        speaker: {\n          type: Object,\n        },\n\n        speakerId: {\n          type: Number\n        }\n      },\n\n    redrawOnInputZone: redrawOnInputZone,\n\n    properties: {\n      internalVolume2: Number,\n\n       musicVolume: {\n        type: Number,\n        notify: true,\n        observer: '_setInternalMusicVolume'\n      },\n\n      speakerId: {\n        type: Number\n      }\n    },\n      \n\n      _setInternalTargetZone: function(dataArrayZoneString) {\n        this.internalTargetZone = dataArrayZoneString;\n        //console.log(\"_setInternalTargetZone\" + dataArrayZoneString);\n      },\n      \n      _setTargetClickedZone: function() {\n        //console.log(\"i was just clicked\");\n        var checkIntZone = 0;\n        var checkBandsZone = [];\n        var targetTextZone = \"Invalid input at \";\n\n\n\n        $(document.getElementsByClassName(\"inputs-zone\")).each(function(i) {\n          if(isNaN(this.value) || this.value < -20 || this.value > 80) {\n            //console.log(typeof this.value, parseInt(this.value));\n            //console.log(this.name);\n            checkIntZone++;\n            //console.log(checkBandsZone);\n          }\n        });\n\n        //console.log(checkBandsZone);\n\n        if(checkIntZone > 0) {\n          if(checkBandsZone.length == 1) {\n            targetTextZone += checkBandsZone[0] + \"Hz\";\n          } else {\n            for (var i = 0; i < checkBandsZone.length - 1; i++) {\n              targetTextZone += checkBandsZone[i] + \"Hz, \"\n            }\n            targetTextZone += \"and \" + checkBandsZone[checkBandsZone.length - 1] + \"Hz\";\n          }\n          this.$.toaster.duration = 2000 + (500 * checkBandsZone.length);\n          this.$.toaster.text = targetTextZone;\n          this.$.toaster.show();\n        } else {\n          var inputsZoneArray = document.getElementsByClassName(\"inputs-zone\");\n          //console.log(inputsZoneArray);\n          for(var x = 0; x < inputsZoneArray.length; x++) {\n            dataArrayZone[x] = inputsZoneArray[x].value;\n          }\n\n          this.dataArrayZoneString = dataArrayZone.join(\", \");\n          for (var i = 0; i < speaker.CurrentTarget.length; i++) { \n            speaker.CurrentTarget[i] = dataArrayZone[i];\n          }\n          this.target = dataArrayZone.join(\" \");\n          //console.log(dataArrayZone);\n          this.$.toaster.text = \"Target set to: \" + dataArrayZone.join(\", \") + \", switch to the equalizer page for further adjustment\";\n          this.$.toaster.show();\n          //console.log(\"_setTargetClicked\");\n\n\n          this.$.updateTargetAjaxZone.body = {\n            \"zone\": speaker.zone.zoneID,\n            \"constants\": this.target,\n          };\n\n          this.$.updateTargetAjaxZone.generateRequest();\n        }\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(data.response);\n      },\n\n      _acceptPressed: function(event) {\n        var name = this.$.popupInput.value.valueOf().replace(\"\\n\", \"\").replace(\"\\t\", \"\");\n        var ifvar = 0;\n        if(speaker.zone.TargetNames.length > 0) {\n          for(var i = 0; i < speaker.zone.TargetNames.length; i++) {\n            if(name.toLowerCase() == speaker.zone.TargetNames[i].valueOf().toLowerCase()) {\n              //console.log(\"same name dude\");\n              ifvar++;\n            }\n          }\n        }\n\n        if(ifvar > 0) {\n          //console.log(\"we are in here right now\");\n          this.err = \"Invalid name: Name already taken\";\n          this.$.errorAdjustToast.text = this.err;\n          this.$.errorAdjustToast.show();\n        } else {\n          this.$.addTargetAjaxZone.body = {\n            \"zone\": speaker.zone.zoneID,\n            \"name\": name,\n            \"update\": false,\n            \"constants\": dataArrayZone.join(\" \")\n          };\n\n          //console.log(\"addTargetAjax:\", addTargetAjaxZone.body);\n          this.$.addTargetAjaxZone.generateRequest();\n          //console.log(this.$.addTargetAjaxZone.body);\n          this.$.dialog.toggle();\n\n          this.$.errorAdjustToast.text = \"Added target: \" + name + \" \" + dataArrayZone.join(\", \");\n          //console.log(this.$.errorAdjustToast.text);\n\n          this.$.errorAdjustToast.show();\n\n          temp = document.createElement(\"paper-item\");\n          temp.setAttribute(\"value\", name);\n          temp.setAttribute(\"id\", name);\n          temp.innerHTML = name;\n          Polymer.dom(this.$.targetListbox).appendChild(temp);\n\n          var length = speaker.zone.Target.length;\n\n          //console.log(dataArrayZone);\n\n          var dataArrayZoneCopy = dataArrayZone.slice();\n\n          //console.log(\"dataArrayZoneCopy: \", dataArrayZoneCopy);\n\n          speaker.zone.TargetNames[speaker.zone.TargetNames.length] = name;\n\n          //console.log(speaker.zone.Target);\n\n          this.$.targetListbox.selected = name;\n          this.$.popupInput.value = \"\";\n        }\n      },\n\n      _cancelPressed: function(event) {\n        this.$.targetListbox.selected = -1;\n        //console.log(lastSelected);\n      },\n\n      listeners: {\n        'targetListbox.iron-select': '_presetSelectionChanged'\n      },\n      \n      _presetSelectionChanged: function(event) {\n        var selected = this.$.targetListbox.selected.valueOf().toLowerCase().replace(\"\\n\", \"\");\n\n        if(selected == \"currently applied\") {\n          this.$.errorAdjustToast.text = \"Currently applied constants loaded! \" + dataArrayZone.join(\", \");\n          this.$.errorAdjustToast.show();\n\n          lastSelected = this.$.targetListbox.selected;\n\n          for (var i = 0; i < speaker.zone.CurrentTarget.length; i++) { \n            dataArrayZone[i] = speaker.zone.CurrentTarget[i];\n          }\n\n          redrawZone(dataZone, lineAttributesZone);\n\n          $(document.getElementsByClassName(\"inputs-zone\")).each(function(j) {\n            this.value = dataArrayZone[j];\n          });\n        } else if(selected == \"add new target\") {\n            var addTargetAjaxZone = document.getElementById(\"addTargetAjaxZone\");\n            //console.log(addTargetAjaxZone);\n            this.$.dialog.toggle();\n        } else if(speaker.zone.TargetNames.length > 0) {\n            lastSelected = this.$.targetListbox.selected;\n            var associationLink = -1;\n            for (k in speaker.zone.TargetNames) {\n              if(selected == speaker.zone.TargetNames[k].valueOf().toLowerCase()) {\n                associationLink = k;\n                //console.log(\"associationLink\", associationLink);\n                break;\n              }\n            }\n            if(associationLink != -1) {\n              //console.log(speaker.zone.Target.length);\n\n              for (var j = 0; j < speaker.zone.Target[0].length; j++) {\n                dataArrayZone[j] = speaker.zone.Target[associationLink - 1][j]; \n              }\n\n              $(document.getElementsByClassName(\"inputs-zone\")).each(function(k) {\n                this.value = dataArrayZone[k];\n              });\n\n              redrawOnInputZone(dataZone, lineAttributesZone);\n              this.$.errorAdjustToast.text = this.$.targetListbox.selected + \" target loaded! \" + dataArrayZone.join(\", \");\n              this.$.errorAdjustToast.show();\n              //console.log(\"Speaker \" + speaker.zone.zoneID + \" selected target: \" + selected);\n            }\n          }\n        },\n\n      ready: function() {\n        //console.log(\"target stuff zone\", this.internalTarget, this.target);\n        this.internalTarget = this.target;\n        //console.log(\"I am ready \" + this.internalTarget);\n        //console.log(\"ready shit\", this.$.targetChartZone);\n        \n      }\n    });\n\n    var myChartZone;\n\n    var canvasZone = document.getElementById(\"targetChartZone\");\n    var chart_width_scalar = .8;\n    var chart_height_scalar = .55;\n\n\n  $(document).ready(function() {\n    canvasZone = document.getElementById(\"targetChartZone\");\n    canvasZone.width = $(window).width() * chart_width_scalar;\n    canvasZone.height = $(window).height() * chart_height_scalar;\n\n    $(document.getElementsByClassName(\"inputs-zone\")).each(function(i) {\n      this.value = dataArrayZone[i];\n    });\n\n    //console.log(\"dater zone\");\n    //console.log(dataZone, lineAttributesZone);\n\n    myChartZone = new Chart(canvasZone.getContext(\"2d\")).Line(dataZone, lineAttributesZone);\n  });\n\n\n  $(window).resize(function() {\n    $($(canvasZone).parent()).prepend(\"<canvas id=\\\"targetChartZone\\\" style=\\\"margin-left: calc(.02 * 100vh); margin-right: calc(.02 * 100vh); margin-top: calc(.02 * 100vh);\\\" class=\\\"chartClass\\\"></canvas>\");\n    canvasZone.remove();\n\n    //console.log(canvasZone);\n\n    canvasZone = document.getElementById(\"targetChartZone\");\n    canvasZone.width = $(window).width() * chart_width_scalar;\n    canvasZone.height = $(window).height() * chart_height_scalar;\n    myChartZone = new Chart(canvasZone.getContext(\"2d\")).Line(dataZone, resizeLineAttributesZone);\n  });\n\n  function redrawZone(drawingData, drawingLineAttributes) {\n    $($(canvasZone).parent()).prepend(\"<canvas id=\\\"targetChartZone\\\" style=\\\"margin-left: calc(.02 * 100vh); margin-right: calc(.02 * 100vh); margin-top: calc(.02 * 100vh);\\\" class=\\\"chartClass\\\"></canvas>\");\n    canvasZone.remove();\n\n    canvasZone = document.getElementById(\"targetChartZone\");\n    //console.log(\"this is the canvasZone\", canvasZone);\n    canvasZone.width = $(window).width() * chart_width_scalar;\n    canvasZone.height = $(window).height() * chart_height_scalar;\n    myChartZone = new Chart(canvasZone.getContext(\"2d\")).Line(drawingData, drawingLineAttributes);\n\n  }\n\n  function redrawOnInputZone() {\n    //console.log(\"I am being called: redrawOnInputZone\");\n    var errorAdjustToast = document.getElementById(\"errorAdjustToast\");\n    var strokeColor = \"#3f51b5\";\n    var pointStrokeColor = \"#3f51b5\";\n    var fillColor = \"rgba(63, 81, 181, .25)\";\n\n    //console.log(dataArrayZone);\n\n    $(document.getElementsByClassName(\"inputs-zone\")).each(function(i) {\n      //console.log(dataArrayZone.length);\n      if(this.value > -21 && this.value < 81 && this.value !== \"\") {\n        dataArrayZone[i] = parseInt(this.value);\n      } else {\n        dataArrayZone[i] = null;\n        \n        // Set the error colors\n        strokeColor = \"#F33F31\";\n        pointStrokeColor = \"#F33F31\";\n        fillColor = \"rgba(243, 63, 49, .25)\";\n\n        if(isNaN(this.value)) {\n          errorAdjustToast.text = \"Invalid entry for \" + labelsZone[i] + \"Hz: Only numerical values are accepted\";\n          errorAdjustToast.show();\n        } else if (this.value === \"\") {\n\n        } else {\n          errorAdjustToast.text = \"Invalid entry for \" + labelsZone[i] + \"Hz: Accepted range of values is -20 to 80\";\n          errorAdjustToast.show();\n        }\n      }\n    });\n\n    var redrawDataZone = {\n      labels: labelsZone,\n      datasets: [{\n        fillColor: fillColor,\n        strokeColor: strokeColor,\n        pointColor: \"#fff\",\n        pointStrokeColor: pointStrokeColor,  \n        data: dataArrayZone,\n        }]\n    };\n\n    redrawZone(redrawDataZone, redrawLineAttributesZone);\n  }\n"
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "dataArrayZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~dataArrayZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "labelsZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~labelsZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "dataZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~dataZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lineAttributesZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~lineAttributesZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "resizeLineAttributesZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~resizeLineAttributesZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "redrawLineAttributesZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~redrawLineAttributesZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "canvasZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~canvasZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "chart_width_scalar",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~chart_width_scalar",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "chart_height_scalar",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~chart_height_scalar",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 290,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "redrawZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~redrawZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "params": [
      {
        "name": "drawingData",
        "types": [
          "*"
        ]
      },
      {
        "name": "drawingLineAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "redrawOnInputZone",
    "memberof": "rawjs/target-selector-zone.html.js",
    "longname": "rawjs/target-selector-zone.html.js~redrawOnInputZone",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector-zone.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/target-selector.html.js",
    "memberof": null,
    "longname": "rawjs/target-selector.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    window.addEventListener('WebComponentsReady', function(e) {\n      //console.log(\"WebComponentsReady\");\n      //console.log();\n    });\n\n    var dataArray = [];\n    //console.log(dataArray);\n\n    var labels = [\"80\", \"100\", \"125\", \"160\", \"200\", \"250\", \"315\", \"400\", \"500\", \"630\", \"800\", \"1k\", \"1.25k\", \"1.6k\", \"2k\", \"2.5k\", \"3.15k\", \"4k\", \"5k\", \"6.3k\", \"8k\"];\n\n\n    var data = {\n      labels: labels,\n      datasets: [{\n        fillColor: \"rgba(63, 81, 181, 0.25)\",\n        strokeColor: \"#3f51b5\",\n        pointColor: \"#fff\",\n        pointStrokeColor: \"#3f51b5\",  \n        data: dataArray,\n      }]\n    };\n\n    var lineAttributes = {\n      scaleOverride: true,\n      scaleSteps: 10,\n      scaleStartValue: -20,\n      scaleStepWidth: 10,\n      scaleShowLabels: true,\n      scaleFontSize: 12,\n    };\n\n    var resizeLineAttributes = {\n      animation: false,\n      scaleOverride: true,\n      scaleSteps: 10,\n      scaleStartValue: -20,\n      scaleStepWidth: 10,\n      scaleShowLabels: true,\n      scaleFontSize: 12,\n    };\n\n    var redrawLineAttributes = {\n      showTooltips: true,\n      scaleOverride: true,\n      scaleSteps: 10,\n      scaleStartValue: -20,\n      scaleStepWidth: 10,\n      scaleShowLabels: true,\n      scaleFontSize: 12,\n    };\n\n    Polymer({\n      is: 'target-selector',\n      \n      properties: {\n        internalTarget: String,\n\n        target: {\n          type: String,\n          notify: true,\n          observer: '_setInternalTarget'\n        },\n\n        speaker: {\n          type: Object,\n        },\n        speakerId: {\n          type: Number\n        }\n      },\n\n      redrawOnInput: redrawOnInput,\n\n      _setInternalTarget: function(dataArrayString) {\n        this.internalTarget = dataArrayString;\n        //console.log(\"_setInternalTarget\" + dataArrayString);\n      },\n      \n      _setTargetClicked: function() {\n        //console.log(\"i got pressed _setTargetClicked\");\n        var checkInt = 0;\n        var checkBands = [];\n        var targetText = \"Invalid input at \";\n\n        $(document.getElementsByClassName(\"inputs\")).each(function(i) {\n          if(isNaN(this.value) || this.value < -20 || this.value > 80) {\n            //console.log(typeof this.value, parseInt(this.value));\n            //console.log(this.name);\n            checkInt++;\n            checkBands.push(labels[i]); // may have to put new string here\n            //console.log(checkBands);\n          }\n        });\n\n        //console.log(checkBands);\n\n        if(checkInt > 0) {\n          if(checkBands.length == 1) {\n            targetText += checkBands[0] + \"Hz\";\n          } else {\n            for (var i = 0; i < checkBands.length - 1; i++) {\n              targetText += checkBands[i] + \"Hz, \"\n            }\n            targetText += \"and \" + checkBands[checkBands.length - 1] + \"Hz\";\n          }\n          this.$.toaster.duration = 2000 + (500 * checkBands.length);\n          this.$.toaster.text = targetText;\n          this.$.toaster.show();\n        } else {\n          //console.log(\"can you just fucking work\", this.target, dataArray);\n          this.dataArrayString = dataArray.join(\", \");\n          //console.log(\"current target length\", this.speaker.CurrentTarget.length);\n          for (var i = 0; i < this.speaker.CurrentTarget.length; i++) { \n            this.speaker.CurrentTarget[i] = dataArray[i];\n          }\n          //console.log(\"can you just fucking work\", this.target, dataArray);\n          this.target = dataArray.join(\" \");\n          //console.log(this.target, dataArray);\n          //console.log(dataArray);\n          this.$.toaster.text = \"Target set to: \" + dataArray.join(\", \") + \", switch to the equalizer page for further adjustment\";\n          this.$.toaster.show();\n          //console.log(\"_setTargetClicked\");\n        }\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(data.response);\n      },\n\n      _acceptPressed: function(event) {\n        //console.log(\"i got pressed _acceptPressed\");\n        var name = this.$.popupInput.value.valueOf().replace(\"\\n\", \"\").replace(\"\\t\", \"\");\n        var ifvar = 0;\n        if(this.speaker.TargetNames.length > 0) {\n          for(var i = 0; i < this.speaker.TargetNames.length; i++) {\n            if(name.toLowerCase() == this.speaker.TargetNames[i].valueOf().toLowerCase()) {\n              //console.log(\"same name dude\");\n              ifvar++;\n            }\n          }\n        }\n\n        if(ifvar > 0) {\n          //console.log(\"we are in here right now\");\n          this.err = \"Invalid name: Name already taken\";\n          this.$.errorAdjustToast.text = this.err;\n          this.$.errorAdjustToast.show();\n        } else {\n          this.$.addTargetAjax.body = {\n            \"speaker\": this.speakerId,\n            \"name\": name,\n            \"update\": false,\n            \"constants\": dataArray.join(\" \")\n          };\n\n          //console.log(\"addTargetAjax:\", addTargetAjax.body);\n          this.$.addTargetAjax.generateRequest();\n\n          this.$.dialog.toggle();\n\n          this.$.errorAdjustToast.text = \"Added target: \" + name + \" \" + dataArray.join(\", \");\n          //console.log(this.$.errorAdjustToast.text);\n\n          this.$.errorAdjustToast.show();\n\n          temp = document.createElement(\"paper-item\");\n          temp.setAttribute(\"value\", name);\n          temp.setAttribute(\"id\", name);\n          temp.innerHTML = name;\n          Polymer.dom(this.$.targetListbox).appendChild(temp);\n\n          var length = this.speaker.Target.length;\n\n          //console.log(\"dataArray length\", dataArray);\n          this.speaker.Target.push(dataArray.slice());\n\n          this.speaker.TargetNames[this.speaker.TargetNames.length] = name;\n\n          //console.log(this.speaker.Target);\n\n          this.$.targetListbox.selected = name;\n          this.$.popupInput.value = \"\";\n        }\n      },\n\n      _cancelPressed: function(event) {\n        this.$.targetListbox.selected = -1;\n        //console.log(lastSelected);\n      },\n\n      listeners: {\n        'targetListbox.iron-select': '_presetSelectionChanged'\n      },\n      \n      _presetSelectionChanged: function(event) {\n        var selected = this.$.targetListbox.selected.valueOf().toLowerCase().replace(\"\\n\", \"\");\n\n        if(selected == \"currently applied\") {\n          this.$.errorAdjustToast.text = \"Currently applied constants loaded! \" + dataArray.join(\", \");\n          this.$.errorAdjustToast.show();\n\n          lastSelected = this.$.targetListbox.selected;\n\n          for (var i = 0; i < this.speaker.CurrentTarget.length; i++) { \n            dataArray[i] = this.speaker.CurrentTarget[i];\n          }\n\n          redraw(data, lineAttributes);\n\n          $(document.getElementsByClassName(\"inputs\")).each(function(j) {\n            this.value = dataArray[j];\n          });\n        } else if(selected == \"add new target\") {\n            var addTargetAjax = document.getElementById(\"addTargetAjax\");\n            //console.log(addTargetAjax);\n            this.$.dialog.toggle();\n        } else if(this.speaker.TargetNames.length > 0) {\n            lastSelected = this.$.targetListbox.selected;\n            var associationLink = -1;\n            for (k in this.speaker.TargetNames) {\n              if(selected == this.speaker.TargetNames[k].valueOf().toLowerCase()) {\n                associationLink = k;\n                //console.log(\"associationLink\", associationLink);\n                break;\n              }\n            }\n            if(associationLink != -1) {\n              //console.log(this.speaker.Target.length);\n\n              for (var j = 0; j < this.speaker.Target[0].length; j++) {\n               dataArray[j] = this.speaker.Target[associationLink][j]; \n              }\n\n              $(document.getElementsByClassName(\"inputs\")).each(function(k) {\n                this.value = dataArray[k];\n              });\n\n              redraw(data, lineAttributes);\n              this.$.errorAdjustToast.text = this.$.targetListbox.selected + \" target loaded! \" + dataArray.join(\", \");\n              this.$.errorAdjustToast.show();\n              //console.log(\"Speaker \" + this.speakerId + \" selected target: \" + selected);\n            }\n          }\n        },\n\n\n      ready: function() {\n        //console.log(\"target stuff\", this.internalTarget, this.target);\n        this.internalTarget = this.target;\n        //console.log(\"I am ready \" + this.internalTarget);\n      }\n    });\n\n    var myChart;\n\n    var canvas = document.getElementById(\"targetChart\");\n    var chart_width_scalar = .8;\n    var chart_height_scalar = .55;\n\n\n  $(document).ready(function() {\n    canvas = document.getElementById(\"targetChart\");\n    canvas.width = $(window).width() * chart_width_scalar;\n    canvas.height = $(window).height() * chart_height_scalar;\n\n    $(document.getElementsByClassName(\"inputs\")).each(function(i) {\n      this.value = dataArray[i];\n    });\n\n    //console.log(\"dater\");\n    //console.log(data, lineAttributes);\n\n    myChart = new Chart(canvas.getContext(\"2d\")).Line(data, lineAttributes);\n  });\n\n\n  $(window).resize(function() {\n    $($(canvas).parent()).prepend(\"<canvas id=\\\"targetChart\\\" style=\\\"margin-left: calc(.02 * 100vh); margin-right: calc(.02 * 100vh); margin-top: calc(.02 * 100vh);\\\" class=\\\"chartClass\\\"></canvas>\");\n    canvas.remove();\n\n    //console.log(canvas);\n\n    canvas = document.getElementById(\"targetChart\");\n    canvas.width = $(window).width() * chart_width_scalar;\n    canvas.height = $(window).height() * chart_height_scalar;\n    myChart = new Chart(canvas.getContext(\"2d\")).Line(data, resizeLineAttributes);\n  });\n\n  function redraw(drawingData, drawingLineAttributes) {\n    $($(canvas).parent()).prepend(\"<canvas id=\\\"targetChart\\\" style=\\\"margin-left: calc(.02 * 100vh); margin-right: calc(.02 * 100vh); margin-top: calc(.02 * 100vh);\\\" class=\\\"chartClass\\\"></canvas>\");\n    canvas.remove();\n\n    canvas = document.getElementById(\"targetChart\");\n    canvas.width = $(window).width() * chart_width_scalar;\n    canvas.height = $(window).height() * chart_height_scalar;\n    myChart = new Chart(canvas.getContext(\"2d\")).Line(drawingData, drawingLineAttributes);\n\n  }\n\n  function redrawOnInput() {\n    var errorAdjustToast = document.getElementById(\"errorAdjustToast\");\n    var strokeColor = \"#3f51b5\";\n    var pointStrokeColor = \"#3f51b5\";\n    var fillColor = \"rgba(63, 81, 181, .25)\";\n\n    //console.log(dataArray);\n\n    $(document.getElementsByClassName(\"inputs\")).each(function(i) {\n      //console.log(\"this is the i thing that we printed\", i);\n      //console.log(dataArray.length);\n      if(this.value > -21 && this.value < 81 && this.value !== \"\") {\n        dataArray[i] = parseInt(this.value);\n      } else {\n        dataArray[i] = null;\n        \n        // Set the error colors\n        strokeColor = \"#F33F31\";\n        pointStrokeColor = \"#F33F31\";\n        fillColor = \"rgba(243, 63, 49, .25)\";\n\n        if(isNaN(this.value)) {\n          errorAdjustToast.text = \"Invalid entry for \" + labels[i] + \"Hz: Only numerical values are accepted\";\n          errorAdjustToast.show();\n        } else if (this.value === \"\") {\n\n        } else {\n          errorAdjustToast.text = \"Invalid entry for \" + labels[i] + \"Hz: Accepted range of values is -20 to 80\";\n          errorAdjustToast.show();\n        }\n      }\n    });\n\n    var redrawData = {\n      labels,\n      datasets: [{\n        fillColor: fillColor,\n        strokeColor: strokeColor,\n        pointColor: \"#fff\",\n        pointStrokeColor: pointStrokeColor,  \n        data: dataArray,\n        }]\n    };\n\n    redraw(redrawData, redrawLineAttributes);\n  }\n"
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "dataArray",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~dataArray",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "labels",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~labels",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~data",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lineAttributes",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~lineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "resizeLineAttributes",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~resizeLineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "redrawLineAttributes",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~redrawLineAttributes",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "canvas",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~canvas",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "chart_width_scalar",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~chart_width_scalar",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "chart_height_scalar",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~chart_height_scalar",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "redraw",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~redraw",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "params": [
      {
        "name": "drawingData",
        "types": [
          "*"
        ]
      },
      {
        "name": "drawingLineAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "redrawOnInput",
    "memberof": "rawjs/target-selector.html.js",
    "longname": "rawjs/target-selector.html.js~redrawOnInput",
    "access": null,
    "export": false,
    "importPath": "./rawjs/target-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/volume-selector.html.js",
    "memberof": null,
    "longname": "rawjs/volume-selector.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n    var localLevelForVolumeSelector = parseInt(localStorage.getItem(\"level\"));\n\n    Polymer({\n      is: 'volume-selector',\n      \n      properties: {\n        internalVolume: String,\n\n        volume: {\n          type: String,\n          notify: true,\n          observer: '_setInternalVolume'\n        },\n\n        speakerId: {\n          type: Number\n        }\n      },\n\n      _setInternalVolume: function(volume) {\n        this.internalVolume = volume;\n        //console.log(\"_setInternalVolume\");\n      },\n      \n      _setVolumeClicked: function() {\n        if(zoneFlag == 0) {\n          if(localLevelForVolumeSelector > 0) {\n            this.$.thresholdValue.body = {\n              \"speaker\": speakerid, \n\n              \"musicMin\":   ((!isNaN(parseInt(this.$.musicMin.value)))   ? parseInt(this.$.musicMin.value)   : 0),\n              \"musicMax\":   ((!isNaN(parseInt(this.$.musicMax.value)))   ? parseInt(this.$.musicMax.value)   : 100),\n\n              \"pagingMin\":  ((!isNaN(parseInt(this.$.pagingMin.value)))  ? parseInt(this.$.pagingMin.value)  : 0),\n              \"pagingMax\":  ((!isNaN(parseInt(this.$.pagingMax.value)))  ? parseInt(this.$.pagingMax.value)  : 100),\n\n              \"maskingMin\": ((!isNaN(parseInt(this.$.maskingMin.value))) ? parseInt(this.$.maskingMin.value) : 0),\n              \"maskingMax\": ((!isNaN(parseInt(this.$.maskingMax.value))) ? parseInt(this.$.maskingMax.value) : 100)\n            };\n            this.$.thresholdValue.generateRequest();\n          }\n\n          if(localLevelForVolumeSelector < 1 && \n            (this.$.volume3.value < this.$.musicMin.value || this.$.volume3.value > this.$.musicMax.value || \n            this.$.volume4.value < this.$.pagingMin.value || this.$.volume4.value > this.$.pagingMax.value || \n            this.$.volume5.value < this.$.maskingMin.value || this.$.volume5.value > this.$.maskingMax.value)) {\n\n            this.$.invalidVolumeToast.show();\n            return;\n          }\n\n          this.volume = this.internalVolume + \" \" + this.internalMusicVolume + \" \" + this.internalPagingVolume + \" \" + this.internalSoundMaskingVolume;\n          this.$.toast.show();\n          //console.log(\"_setVolumeClicked\");\n        } else {\n          if(localLevelForVolumeSelector > 0) {\n            this.$.thresholdValueZone.body = {\n              \"zone\": speaker.zone.zoneID, \n\n              \"musicMin\":   ((!isNaN(parseInt(this.$.musicMin.value)))   ? parseInt(this.$.musicMin.value)   : 0),\n              \"musicMax\":   ((!isNaN(parseInt(this.$.musicMax.value)))   ? parseInt(this.$.musicMax.value)   : 100),\n\n              \"pagingMin\":  ((!isNaN(parseInt(this.$.pagingMin.value)))  ? parseInt(this.$.pagingMin.value)  : 0),\n              \"pagingMax\":  ((!isNaN(parseInt(this.$.pagingMax.value)))  ? parseInt(this.$.pagingMax.value)  : 100),\n\n              \"maskingMin\": ((!isNaN(parseInt(this.$.maskingMin.value))) ? parseInt(this.$.maskingMin.value) : 0),\n              \"maskingMax\": ((!isNaN(parseInt(this.$.maskingMax.value))) ? parseInt(this.$.maskingMax.value) : 100)\n            };\n            //console.log(this.$.thresholdValueZone.body);\n            this.$.thresholdValueZone.generateRequest();\n          }\n\n          if(localLevelForVolumeSelector < 1 && \n            (this.$.volume3.value < this.$.musicMin.value || this.$.volume3.value > this.$.musicMax.value || \n            this.$.volume4.value < this.$.pagingMin.value || this.$.volume4.value > this.$.pagingMax.value || \n            this.$.volume5.value < this.$.maskingMin.value || this.$.volume5.value > this.$.maskingMax.value)) {\n\n            this.$.invalidVolumeToast.show();\n            return;\n          } else {\n            this.$.updateVolumesZone.body = {\n              \"zone\": speaker.zone.zoneID,\n              \"volume\": this.$.volume2.value,\n              \"music\": this.$.volume3.value,\n              \"paging\": this.$.volume4.value,\n              \"masking\": this.$.volume5.value\n            };\n            this.$.updateVolumesZone.generateRequest();\n          }\n          this.$.toast.show();\n          //console.log(\"_setVolumeClicked\");\n        }\n      },\n      \n      decrementVolume: function() {\n        if(localLevelForVolumeSelector < 1) {\n          return;\n        }\n        this.$.volume2.decrement();\n        this.$.volume2._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      incrementVolume: function() {\n        if(localLevelForVolumeSelector < 1) {\n          return;\n        }\n        this.$.volume2.increment();\n        this.$.volume2._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      decrementMusicVolume: function() {\n        if(this.internalMusicVolume - 1 < LowerThreshold[0] && localLevelForVolumeSelector < 1) {\n          return;\n        }\n        this.$.volume3.decrement();\n        this.$.volume3._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      incrementMusicVolume: function() {\n        if(this.internalMusicVolume + 1 > UpperThreshold[0] && localLevelForVolumeSelector < 1) {\n          return;\n        }\n        this.$.volume3.increment();\n        this.$.volume3._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      decrementPagingVolume: function() {\n        if(this.internalPagingVolume - 1 < LowerThreshold[1] && localLevelForVolumeSelector < 1) {\n          return;\n        }\n        this.$.volume4.decrement();\n        this.$.volume4._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      incrementPagingVolume: function() {\n        if(this.internalPagingVolume + 1 > UpperThreshold[1] && localLevelForVolumeSelector < 1) {\n          return;\n        }\n        this.$.volume4.increment();\n        this.$.volume4._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      decrementMaskingVolume: function() {\n        if(this.internalMaskingVolume - 1 < LowerThreshold[2] && localLevelForVolumeSelector < 1) {\n          return;\n        }\n        this.$.volume5.decrement();\n        this.$.volume5._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      incrementMaskingVolume: function() {\n        if(this.internalMaskingVolume + 1 > UpperThreshold[2] && localLevelForVolumeSelector < 1) {\n          return;\n        }\n        this.$.volume5.increment();\n        this.$.volume5._expandKnob();\n        if(this.prevTimeout != 0) {\n          window.clearTimeout(this.prevTimeout)\n        }\n        var elem = this;\n        var func = this.resetKnob;\n        this.prevTimeout = window.setTimeout(function(){\n          func(elem);\n        }, 500);\n      },\n      \n      resetKnob: function(elem) {\n        elem.prevTimeout = 0;\n        elem.$.volume2._resetKnob();\n        elem.$.volume3._resetKnob();\n        elem.$.volume4._resetKnob();\n        elem.$.volume5._resetKnob();\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(data.response);\n      },\n\n      ready: function() {\n        //console.log(speakerid);\n        //console.log(this, \"\\n\", this.$, \"\\n\", this.$.speakerId);\n\n        switch(localLevelForVolumeSelector) {\n          case 0:\n            this.$.musicMin.disabled = true;\n            this.$.musicMax.disabled = true;\n\n            this.$.pagingMin.disabled = true;\n            this.$.pagingMax.disabled = true;\n            \n            this.$.maskingMin.disabled = true;\n            this.$.maskingMax.disabled = true;\n\n            this.$.volume2.disabled = true;\n            break;\n        }\n\n        this.internalVolume = this.volume;\n        //console.log(\"I am ready \" + this.internalVolume + \" \" + this.internalMusicVolume + \" \" + this.internalPagingVolume) + \" \" + this.internalSoundMaskingVolume;\n      }\n    });\n"
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "localLevelForVolumeSelector",
    "memberof": "rawjs/volume-selector.html.js",
    "longname": "rawjs/volume-selector.html.js~localLevelForVolumeSelector",
    "access": null,
    "export": false,
    "importPath": "./rawjs/volume-selector.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/zone-assigner.html.js",
    "memberof": null,
    "longname": "rawjs/zone-assigner.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    Polymer({\n      is: 'zone-assigner',\n\n      properties: {\n        speaker: {\n          type: Object,\n          observer: \"_speakerUpdated\"\n        }\n      },\n      \n      _acceptClicked: function() {\n        this.updateZoneId();\n        return true;\n      },\n      \n      updateZoneId: function() {\n        var zone = this.$.zoneMenu.selectedItem.zone;\n        var updatedAttributes = [\"zoneId\"];\n          var attributeValues = {\n            \"zoneId\": zone.zoneID,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speaker.id\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n       var oldZone = this.speaker.zone;\n       zone.speakers.push(this.speaker);\n       oldZone.speakers.splice(oldZone.speakers.indexOf(this.speaker), 1);\n       this.speaker.zone = zone;\n       this.fire('zoneupdated', {speakerId: this.speaker.id});\n      },\n      \n      _speakerUpdated: function() {\n        var speaker = this.speaker;\n        var zoneName = speaker.zone.name;\n        this.$.zoneMenu.selected = zoneName;\n        console.log(this.speaker);\n      },\n      \n       _logResponse: function(event, data) {\n        console.log(data.response);\n      }\n    });\n"
  },
  {
    "__docId__": 138,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/zone-controller.html.js",
    "memberof": null,
    "longname": "rawjs/zone-controller.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    Polymer({\n      is: 'zone-controller',\n\n      behaviors: [\n        Polymer.NeonAnimatableBehavior\n      ],\n\n      properties: {\n        zone: {\n          type: Object,\n          observer: \"_zoneUpdated\"\n        },\n\n        isReady: {\n          type: Boolean,\n          value: false\n        },\n\n        mode: {\n          type: String,\n          value: \"volume\"\n        },\n\n        speakerId: {\n          type: Number,\n          value: 0\n        },\n\n        volumeLevel: {\n          type: String,\n          value: \"0\",\n          observer: '_volumeUpdate'\n        },\n        \n        musicLevel: {\n          type: Number,\n          value: 0\n        },\n\n        pagingLevel: {\n          type: String,\n          value: \"0\",\n          observer: '_pagingUpdate'\n        },\n\n        equalizerone: {\n          type: String,\n          value: \"0\",\n          observer: '_equalizerUpdate'\n        },\n\n        musicone: {\n          type: String,\n          value: \"0\",\n          observer: '_equalizerUpdate'\n        },\n\n        animationConfig: {\n          value: function() {\n            return {\n              'entry': {\n                  name: 'fade-in-animation',\n                  node: this\n                },\n              'exit': {\n                name: 'slide-left-animation',\n                node: this\n              }\n            }\n          }\n        }\n      },\n\n      _pagingUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"paging\"];\n          var attributeValues = {\n            \"paging\": this.pagingLevel,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n        }\n        //console.log(\"_pagingUpdate \" + this.pagingLevel);\n      },\n\n      _equalizerUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"equalizer\"];\n          var attributeValues = {\n            \"equalizer\": this.equalizerone,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n\n          //console.log(this.$.speakerUpdateAjax.body);\n\n        }\n      },\n\n      _musicEqualizerUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"music\"];\n          var attributeValues = {\n            \"music\": this.musicone,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n\n          //console.log(this.$.speakerUpdateAjax.body);\n\n        }\n      },\n\n      _targetUpdate: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"target\"];\n          var attributeValues = {\n            \"target\": this.target,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n        }\n      },\n\n      _targetUpdateZone: function() {\n        if(this.isReady) {\n          var updatedAttributes = [\"target\"];\n          var attributeValues = {\n            \"target\": this.target,\n          };\n          this.$.speakerUpdateAjax.body = {\n            \"updatedAttributes\": updatedAttributes, \n            \"attributeValues\": attributeValues,\n            \"speaker\": this.speakerId\n          };\n          this.$.speakerUpdateAjax.generateRequest();\n        }\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(data.response);\n      },\n\n      _initializeStatus: function(speaker) {\n        this.speakerId = speaker.id;\n        speakerid = speaker.id;\n        this.volume = speaker.VolumeLevel[0];\n        this.equalizer = speaker.equalizerone;\n      },\n\n      _speakerUpdated: function() {\n        this.isReady = false;\n        this._initializeStatus(this.speaker);\n        this.isReady = true;\n      },\n\n      ready: function() {\n        //console.log(document.getElementById('target'));\n          this._initializeStatus(this.speaker);\n        this.isReady = true;\n        //console.log(\"this is the zone flag\", zoneFlag);\n      },\n\n      _initializeStatus: function(speaker) {\n        this.volume = 0;\n      },\n\n      _zoneUpdated: function() {\n        this.isReady = false;\n        this._initializeStatus();\n        this.isReady = true;\n      }\n    });\n"
  },
  {
    "__docId__": 139,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/zone-creation-form.html.js",
    "memberof": null,
    "longname": "rawjs/zone-creation-form.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "    Polymer({\n      is: 'zone-creation-form',\n\n      _submit: function() {\n        if(!this.$.form.validate())\n            return;\n        this.err = \"\";\n        this.successMsg = \"\";\n        this.$.progress.customStyle['--paper-progress-active-color'] = \"#4285f4\";\n        this.$.progress.updateStyles();\n        this.$.progress.indeterminate = true;\n\t\tthis.$.zoneCreationAjax.body = {\n\t\t\tname: this.$.name.value,\n\t\t}\n\t\tthis.$.zoneCreationAjax.generateRequest();\n      },\n\n      _logResponse: function(event, data) {\n        if(!data.response.success) {\n          this.$.progress.customStyle['--paper-progress-active-color'] = \"#F44336\";\n          this.$.progress.updateStyles();\n          this.$.progress.indeterminate = false;\n          this.$.progress.value = 100;\n          this.err = data.response.err\n        } else {\n          this.$.progress.value = 0;\n          this.$.progress.indeterminate = false;\n          this.successMsg = \"Zone created\";\n          this.$.name.value = \"\";\n        }\n    }\n    });\n"
  },
  {
    "__docId__": 140,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/zone-map-controller.html.js",
    "memberof": null,
    "longname": "rawjs/zone-map-controller.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n  var pagingMap;\n  var map;\n\n  var selectedFeatures;\n  var info = [];\n  var totalInfo = [];\n\n  document.onkeydown = function(evt) {\n    evt = evt || window.event;\n    if (evt.keyCode == 27) {\n      alert(\"You are about to clear you selection.\\nAre you sure you want to do this?\");\n      document.getElementById(\"speakerHolder\").innerHTML = \"\";\n      selectedFeatures.clear();\n      info = [];\n      totalInfo = [];\n    }\n  };\n\n\n  function showPaging() {\n    document.querySelector(\"#pagingZoneMenu\").style.visibility = \"visible\";\n    document.querySelector(\"#pagingZoneContainer\").style.visibility = \"visible\";\n\n    document.querySelector(\"#zoneMenu\").style.visibility = \"hidden\";\n    document.querySelector(\"#zoneContainer\").style.visibility = \"hidden\";\n\n    pagingMap.updateSize();\n  }\n\n  function showMasking() {\n    document.querySelector(\"#pagingZoneMenu\").style.visibility = \"hidden\";\n    document.querySelector(\"#pagingZoneContainer\").style.visibility = \"hidden\";\n\n    document.querySelector(\"#zoneMenu\").style.visibility = \"visible\";\n    document.querySelector(\"#zoneContainer\").style.visibility = \"visible\";\n\n    map.updateSize();\n\n  }\n\n    Polymer({\n      is: 'zone-map-controller',\n\n      behaviors: [\n        Polymer.NeonAnimatableBehavior\n      ],\n\n      properties: {\n        animationConfig: {\n          value: function() {\n            return {\n              'entry': {\n                  name: 'fade-in-animation',\n                  node: this\n                },\n              'exit': {\n                name: 'slide-left-animation',\n                node: this\n              }\n            }\n          }\n        }\n      },\n\n      _acceptPressed: function(e) {\n        this.$.zoneDialog.toggle();\n        this.$.toast.show();\n        //console.log(\"_acceptPressed\", totalInfo);\n        var name = this.$.popupInput.value.valueOf().replace(\"\\n\", \"\").replace(\"\\t\", \"\");\n\n        this.$.createZoneAjax.body = {\n          \"name\":     name,\n          \"speakers\": totalInfo\n        }\n\n        totalInfo = [];\n        document.getElementById(\"speakerHolder\").innerHTML = \"\";\n\n        //console.log(\"createZoneAjax:\", createZoneAjax.body);\n        this.$.createZoneAjax.generateRequest();\n      },\n\n      _cancelPressed: function(e) {\n      },\n\n      _createZone: function(e) {\n        this.$.zoneDialog.toggle();\n      },\n      \n      _refreshSpeaker: function(e) {\n        var speakerId = e.detail.speakerId;\n        this.featureMap[speakerId].changed();\n      },\n      \n      _assignZone: function() {\n        this._hideOverlay();\n        this.$.dialog.open();\n      },\n      \n      _hideOverlay: function() {\n        this.overlay.setPosition(undefined);\n      },\n\n      renderMap: function() {\n        //console.log(this);\n        var mapController = this;\n        mapController.featureMap = {};\n        var container = mapController.$.popup;\n        var overlay = new ol.Overlay(({\n          element: container,\n          autoPan: true,\n          autoPanAnimation: {\n            duration: 250\n          }\n        }));\n      \n        mapController.overlay = overlay;\n        var extent = [0, 0, 2200, 1700];\n        var projection = new ol.proj.Projection({\n          code: 'pixel',\n          units: 'pixels',\n          extent: extent\n        });\n\n        var locations = this.controllers;\n        var features = new Array(locations.length);\n        for(var i = 0; i < features.length; i++) {\n            var coordinates = [locations[i].x, 1700-locations[i].y];\n            features[i] = new ol.Feature({\n              geometry: new ol.geom.Point(coordinates),\n              speaker: locations[i]\n            });\n            mapController.featureMap[locations[i].id] = features[i]\n        }\n\n        var vectorSource = new ol.source.Vector({\n            features: features\n        });\n\n        var style = {}\n\n       var allColors = [\n          '#f44336'\n        ];\n        \n        var unusedColors = [\n          '#f44336'\n        ];\n        var colorMap = {};\n        \n        var vectorLayer = new ol.layer.Vector({\n            source: vectorSource,\n            style: function(feature, resolution) {\n              var zone = feature.getProperties().speaker.zone.name;\n                if(!(zone in colorMap)) {\n                  var color;\n                  if(unusedColors.length > 0) {\n                    var index = Math.floor(Math.random() * unusedColors.length)\n                    color = unusedColors[index]\n                    unusedColors.splice(index, 1);\n                  } else {\n                    color = colors[Math.floor(Math.random() * colors.length)]\n                  }\n\n                  colorMap[zone] = color;\n                }\n                if(!(zone in style) || style[zone].resolution !== resolution) {\n                  style[zone] = {};\n                  style[zone].style = [new ol.style.Style({\n                        image: new ol.style.Circle({\n                            radius: 15/Math.max(resolution,1),\n                            stroke: new ol.style.Stroke({\n                                color: '#000000'\n                            }),\n                            fill: new ol.style.Fill({\n                                color: colorMap[zone]\n                            })\n                        })\n                    })];\n                    style[zone].resolution = resolution;\n                }\n                return style[zone].style;\n            }\n        });\n\n        map = new ol.Map({\n          layers: [\n            new ol.layer.Image({\n              source: new ol.source.ImageStatic({\n                url: '/css/map.png',\n                projection: projection,\n                imageExtent: extent\n              })\n            }),\n              vectorLayer\n          ],\n          overlays: [overlay],\n          target: 'zoneContainer',\n          view: new ol.View({\n            projection: projection,\n            center: ol.extent.getCenter(extent),\n            zoom: 6,\n            zoomFactor: 1.35\n          })\n        });\n        \n        mapController.map = map;\n        var box = new ol.interaction.Select();\n        map.addInteraction(box);\n\n        selectedFeatures = box.getFeatures();\n\n        //console.log(\"selectedFeatures: \", selectedFeatures);\n\n        var dragBox = new ol.interaction.DragBox({\n          condition: ol.events.condition.shiftKeyOnly,\n          style: new ol.style.Style({\n            stroke: new ol.style.Stroke({\n              color: [63, 81, 181, 1]\n            })\n          })\n        }); \n\n        var source = new ol.source.Vector();\n\n        map.addInteraction(dragBox);\n\n        dragBox.on('boxend', function(e) {\n          var extent = dragBox.getGeometry().getExtent();\n\n          //console.log(extent);\n\n          vectorSource.forEachFeatureIntersectingExtent(extent, function(feature) {\n          //console.log(feature);\n\n          //console.log(typeof selectedFeatures.a);\n\n              var areYouInThere = selectedFeatures.a.indexOf(feature);\n              //console.log(areYouInThere);\n              if(areYouInThere == -1) {\n                selectedFeatures.push(feature);\n                totalInfo.push(feature.B.speaker.id); \n                //console.log(totalInfo);\n              } else {\n                //console.log(\"Speaker\", feature.B.speaker.id, \"is already in the list of selected speakers.\");\n                //console.log(selectedFeatures);\n                //console.log(totalInfo);\n              }\n            info.push(feature.B.speaker.id);\n          });\n          //console.log(\"selectedFeatures: \", selectedFeatures);\n\n          if (info.length > 0) {\n            //console.log(\"Selected speakers: \", info);\n\n            //console.log(\"Total selected speakers: \", totalInfo);\n            //console.log(\"Starting sort: \");\n            totalInfo = mergeSort(totalInfo);\n\n            speakerHolder = document.getElementById(\"speakerHolder\");\n            var innerHTML = \"\";\n            speakerHolder.innerHTML = \"\";\n            for (var k = 0; k < totalInfo.length; k++) {\n              if (totalInfo[k] !== undefined) {\n               innerHTML += \"<paper-item center-justified flex style=\\\"background: rgba(63, 81, 181, .1);  border-style: solid; border-radius: 0px; border-width: 1px; border-color: #3f51b5; margin: 5px;\\\"><font style=\\\"width: 100%; text-align: center;\\\"> Speaker \" + totalInfo[k] + \"</font></paper-item>\";\n              }\n            }\n            speakerHolder.innerHTML = innerHTML;\n            //console.log(totalInfo);\n          }\n        });\n\n        dragBox.on('boxstart', function(e) {\n\n        });\n        map.on('click', function() {\n\n        //console.log(selectedFeatures);\n        selectedFeatures.clear();\n        });\n      },\n\n      renderPagingMap: function() {\n        //console.log(this);\n        var mapController = this;\n        mapController.featureMap = {};\n        var container = mapController.$.popup;\n        var overlay = new ol.Overlay(({\n          element: container,\n          autoPan: true,\n          autoPanAnimation: {\n            duration: 250\n          }\n        }));\n      \n        mapController.overlay = overlay;\n        var extent = [0, 0, 2200, 1700];\n        var projection = new ol.proj.Projection({\n          code: 'pixel',\n          units: 'pixels',\n          extent: extent\n        });\n\n        var locations = this.controllers;\n        var features = new Array(locations.length);\n        for(var i = 0; i < features.length; i++) {\n            var coordinates = [locations[i].x, 1700-locations[i].y];\n            features[i] = new ol.Feature({\n              geometry: new ol.geom.Point(coordinates),\n              speaker: locations[i]\n            });\n            mapController.featureMap[locations[i].id] = features[i]\n        }\n\n        var vectorSource = new ol.source.Vector({\n            features: features\n        });\n\n        var style = {}\n\n       var allColors = [\n          '#f44336'\n        ];\n        \n        var unusedColors = [\n          '#f44336'\n        ];\n        var colorMap = {};\n        \n        var vectorLayer = new ol.layer.Vector({\n            source: vectorSource,\n            style: function(feature, resolution) {\n              var zone = feature.getProperties().speaker.zone.name;\n                if(!(zone in colorMap)) {\n                  var color;\n                  if(unusedColors.length > 0) {\n                    var index = Math.floor(Math.random() * unusedColors.length)\n                    color = unusedColors[index]\n                    unusedColors.splice(index, 1);\n                  } else {\n                    color = colors[Math.floor(Math.random() * colors.length)]\n                  }\n\n                  colorMap[zone] = color;\n                }\n                if(!(zone in style) || style[zone].resolution !== resolution) {\n                  style[zone] = {};\n                  style[zone].style = [new ol.style.Style({\n                        image: new ol.style.Circle({\n                            radius: 15 / Math.max(resolution, 1),\n                            stroke: new ol.style.Stroke({\n                                color: '#000000'\n                            }),\n                            fill: new ol.style.Fill({\n                                color: colorMap[zone]\n                            })\n                        })\n                    })];\n                    style[zone].resolution = resolution;\n                }\n                return style[zone].style;\n            }\n        });\n\n        pagingMap = new ol.Map({\n          layers: [\n            new ol.layer.Image({\n              source: new ol.source.ImageStatic({\n                url: '/css/map.png',\n                projection: projection,\n                imageExtent: extent\n              })\n            }),\n              vectorLayer\n          ],\n          overlays: [overlay],\n          target: 'pagingZoneContainer',\n          view: new ol.View({\n            projection: projection,\n            center: ol.extent.getCenter(extent),\n            zoom: 2\n          })\n        });\n        \n        mapController.map = map;\n        var box = new ol.interaction.Select();\n        map.addInteraction(box);\n\n        selectedFeatures = box.getFeatures();\n\n        //console.log(\"selectedFeatures: \", selectedFeatures);\n\n        var dragBox = new ol.interaction.DragBox({\n          condition: ol.events.condition.shiftKeyOnly,\n          style: new ol.style.Style({\n            stroke: new ol.style.Stroke({\n              color: [63, 81, 181, 1]\n            })\n          })\n        }); \n\n        var source = new ol.source.Vector();\n\n        map.addInteraction(dragBox);\n\n        dragBox.on('boxend', function(e) {\n          var extent = dragBox.getGeometry().getExtent();\n\n          //console.log(extent);\n\n          vectorSource.forEachFeatureIntersectingExtent(extent, function(feature) {\n          //console.log(feature);\n\n          //console.log(typeof selectedFeatures.a);\n            var areYouInThere = selectedFeatures.a.indexOf(feature);\n            //console.log(areYouInThere);\n            if(areYouInThere == -1) {\n              selectedFeatures.push(feature);\n              totalInfo.push(feature.B.speaker.id); \n              //console.log(totalInfo);\n            } else {\n              //console.log(\"Speaker\", feature.B.speaker.id, \"is already in the list of selected speakers.\");\n              //console.log(selectedFeatures);\n              //console.log(totalInfo);\n            }\n            info.push(feature.B.speaker.id);\n          });\n          //console.log(\"selectedFeatures: \", selectedFeatures);\n\n          if (info.length > 0) {\n            //console.log(\"Selected speakers: \", info);\n\n            //console.log(\"Total selected speakers: \", totalInfo);\n            \n            //console.log(\"Starting sort: \");\n            totalInfo = mergeSort(totalInfo);\n\n            speakerHolder = document.getElementById(\"speakerHolder\");\n            var innerHTML = \"\";\n            speakerHolder.innerHTML = \"\";\n            for (var k = 0; k < totalInfo.length; k++) {\n              if (totalInfo[k] !== undefined) {\n               innerHTML += \"<paper-item center-justified flex style=\\\"background: rgba(63, 81, 181, .1);  border-style: solid; border-radius: 0px; border-width: 1px; border-color: #3f51b5; margin: 5px;\\\"><font style=\\\"width: 100%; text-align: center;\\\"> Speaker \" + totalInfo[k] + \"</font></paper-item>\";\n              }\n            }\n            speakerHolder.innerHTML = innerHTML;\n            //console.log(totalInfo);\n          }\n        });\n        dragBox.on('boxstart', function(e) {\n          // why is there nothing here??\n        });\n        map.on('click', function() {\n\n        //console.log(selectedFeatures);\n        selectedFeatures.clear();\n        });\n      },\n\n      _logResponse: function(event, data) {\n        //console.log(\"this is the zone response\", data.response);\n      }\n    });\n\n    function mergeSort(arr) {\n        if (arr.length < 2)\n            return arr;\n\n        var middle = parseInt(arr.length / 2);\n        var left   = arr.slice(0, middle);\n        var right  = arr.slice(middle, arr.length);\n\n        return merge(mergeSort(left), mergeSort(right));\n    }\n\n    function merge(left, right) {\n        var result = [];\n\n        while (left.length && right.length) {\n            if (left[0] <= right[0]) {\n                result.push(left.shift());\n            } else {\n                result.push(right.shift());\n            }\n        }\n\n        while (left.length)\n            result.push(left.shift());\n\n        while (right.length)\n            result.push(right.shift());\n\n        return result;\n    }\n"
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "info",
    "memberof": "rawjs/zone-map-controller.html.js",
    "longname": "rawjs/zone-map-controller.html.js~info",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zone-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "totalInfo",
    "memberof": "rawjs/zone-map-controller.html.js",
    "longname": "rawjs/zone-map-controller.html.js~totalInfo",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zone-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "onkeydown",
    "memberof": "rawjs/zone-map-controller.html.js",
    "longname": "rawjs/zone-map-controller.html.js~onkeydown",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zone-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showPaging",
    "memberof": "rawjs/zone-map-controller.html.js",
    "longname": "rawjs/zone-map-controller.html.js~showPaging",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zone-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showMasking",
    "memberof": "rawjs/zone-map-controller.html.js",
    "longname": "rawjs/zone-map-controller.html.js~showMasking",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zone-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mergeSort",
    "memberof": "rawjs/zone-map-controller.html.js",
    "longname": "rawjs/zone-map-controller.html.js~mergeSort",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zone-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 466,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "merge",
    "memberof": "rawjs/zone-map-controller.html.js",
    "longname": "rawjs/zone-map-controller.html.js~merge",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zone-map-controller.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "params": [
      {
        "name": "left",
        "types": [
          "*"
        ]
      },
      {
        "name": "right",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "rawjs/zoneEncapsulation.html.js",
    "memberof": null,
    "longname": "rawjs/zoneEncapsulation.html.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\n  $(document).ready(function () {\n    $('#something').imgAreaSelect({\n        handles: true,\n        onSelectEnd: function(){\n\n        \tvar information = [];\n        \tvar selection = document.getElementsByClassName(\"imgareaselect-selection\");\n        \tvar parent = $(selection).parent();\n        \tinformation.push(parent.offset().left);\n        \tinformation.push(parent.offset().top);\n        \tinformation.push(parent.width());\n        \tinformation.push(parent.height());\n\n        \tconsole.log(information);\n\n        \tvar check_height = information[1] + information[3];\n        \tvar check_width = information[0] + information[2];\n\n        \tconsole.log(check_height, check_width);\n        }\n    });\n}); \n\n\nvar canvas = document.getElementById('c');\ncanvas.width = $(window).width();\ncanvas.height = .98 * $(window).height();\nvar ctx = canvas.getContext('2d');\nvar img = document.createElement('IMG');\n\nimg.onload = function() {\n    var OwnCanv = new fabric.Canvas('c', {\n        isDrawingMode: true\n    });\n\n    var imgInstance = new fabric.Image(img, {\n        left: (window.innerWidth - img.width / 2) / 2,\n        top: (window.innerHeight - img.height / 2) / 2,\n        width: img.width / 2,\n        height: img.height / 2,\n    });\n    OwnCanv.add(imgInstance);\n\n    OwnCanv.freeDrawingBrush.color = \"#3f51b5\"\n    OwnCanv.freeDrawingBrush.width = 4\n\n    OwnCanv.on('path:created', function(options) {\n        var path = options.path;\n        OwnCanv.isDrawingMode = false;\n        OwnCanv.clipTo = function(ctx) {\n            path.render(ctx);\n            console.log(path);\n        };\n        OwnCanv.add(imgInstance);\n    });\n}\n\nimg.src = \"map.png\";\n"
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "canvas",
    "memberof": "rawjs/zoneEncapsulation.html.js",
    "longname": "rawjs/zoneEncapsulation.html.js~canvas",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zoneEncapsulation.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ctx",
    "memberof": "rawjs/zoneEncapsulation.html.js",
    "longname": "rawjs/zoneEncapsulation.html.js~ctx",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zoneEncapsulation.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "img",
    "memberof": "rawjs/zoneEncapsulation.html.js",
    "longname": "rawjs/zoneEncapsulation.html.js~img",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zoneEncapsulation.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "onload",
    "memberof": "rawjs/zoneEncapsulation.html.js",
    "longname": "rawjs/zoneEncapsulation.html.js~onload",
    "access": null,
    "export": false,
    "importPath": "./rawjs/zoneEncapsulation.html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 180,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 181,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 191,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]